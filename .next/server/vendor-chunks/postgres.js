"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/postgres";
exports.ids = ["vendor-chunks/postgres"];
exports.modules = {

/***/ "(rsc)/./node_modules/postgres/src/bytes.js":
/*!********************************************!*\
  !*** ./node_modules/postgres/src/bytes.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst size = 256;\nlet buffer = Buffer.allocUnsafe(size);\nconst messages = \"BCcDdEFfHPpQSX\".split(\"\").reduce((acc, x)=>{\n    const v = x.charCodeAt(0);\n    acc[x] = ()=>{\n        buffer[0] = v;\n        b.i = 5;\n        return b;\n    };\n    return acc;\n}, {});\nconst b = Object.assign(reset, messages, {\n    N: String.fromCharCode(0),\n    i: 0,\n    inc (x) {\n        b.i += x;\n        return b;\n    },\n    str (x) {\n        const length = Buffer.byteLength(x);\n        fit(length);\n        b.i += buffer.write(x, b.i, length, \"utf8\");\n        return b;\n    },\n    i16 (x) {\n        fit(2);\n        buffer.writeUInt16BE(x, b.i);\n        b.i += 2;\n        return b;\n    },\n    i32 (x, i) {\n        if (i || i === 0) {\n            buffer.writeUInt32BE(x, i);\n            return b;\n        }\n        fit(4);\n        buffer.writeUInt32BE(x, b.i);\n        b.i += 4;\n        return b;\n    },\n    z (x) {\n        fit(x);\n        buffer.fill(0, b.i, b.i + x);\n        b.i += x;\n        return b;\n    },\n    raw (x) {\n        buffer = Buffer.concat([\n            buffer.subarray(0, b.i),\n            x\n        ]);\n        b.i = buffer.length;\n        return b;\n    },\n    end (at = 1) {\n        buffer.writeUInt32BE(b.i - at, at);\n        const out = buffer.subarray(0, b.i);\n        b.i = 0;\n        buffer = Buffer.allocUnsafe(size);\n        return out;\n    }\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (b);\nfunction fit(x) {\n    if (buffer.length - b.i < x) {\n        const prev = buffer, length = prev.length;\n        buffer = Buffer.allocUnsafe(length + (length >> 1) + x);\n        prev.copy(buffer);\n    }\n}\nfunction reset() {\n    b.i = 0;\n    return b;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcG9zdGdyZXMvc3JjL2J5dGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxPQUFPO0FBQ2IsSUFBSUMsU0FBU0MsT0FBT0MsV0FBVyxDQUFDSDtBQUVoQyxNQUFNSSxXQUFXLGlCQUFpQkMsS0FBSyxDQUFDLElBQUlDLE1BQU0sQ0FBQyxDQUFDQyxLQUFLQztJQUN2RCxNQUFNQyxJQUFJRCxFQUFFRSxVQUFVLENBQUM7SUFDdkJILEdBQUcsQ0FBQ0MsRUFBRSxHQUFHO1FBQ1BQLE1BQU0sQ0FBQyxFQUFFLEdBQUdRO1FBQ1pFLEVBQUVDLENBQUMsR0FBRztRQUNOLE9BQU9EO0lBQ1Q7SUFDQSxPQUFPSjtBQUNULEdBQUcsQ0FBQztBQUVKLE1BQU1JLElBQUlFLE9BQU9DLE1BQU0sQ0FBQ0MsT0FBT1gsVUFBVTtJQUN2Q1ksR0FBR0MsT0FBT0MsWUFBWSxDQUFDO0lBQ3ZCTixHQUFHO0lBQ0hPLEtBQUlYLENBQUM7UUFDSEcsRUFBRUMsQ0FBQyxJQUFJSjtRQUNQLE9BQU9HO0lBQ1Q7SUFDQVMsS0FBSVosQ0FBQztRQUNILE1BQU1hLFNBQVNuQixPQUFPb0IsVUFBVSxDQUFDZDtRQUNqQ2UsSUFBSUY7UUFDSlYsRUFBRUMsQ0FBQyxJQUFJWCxPQUFPdUIsS0FBSyxDQUFDaEIsR0FBR0csRUFBRUMsQ0FBQyxFQUFFUyxRQUFRO1FBQ3BDLE9BQU9WO0lBQ1Q7SUFDQWMsS0FBSWpCLENBQUM7UUFDSGUsSUFBSTtRQUNKdEIsT0FBT3lCLGFBQWEsQ0FBQ2xCLEdBQUdHLEVBQUVDLENBQUM7UUFDM0JELEVBQUVDLENBQUMsSUFBSTtRQUNQLE9BQU9EO0lBQ1Q7SUFDQWdCLEtBQUluQixDQUFDLEVBQUVJLENBQUM7UUFDTixJQUFJQSxLQUFLQSxNQUFNLEdBQUc7WUFDaEJYLE9BQU8yQixhQUFhLENBQUNwQixHQUFHSTtZQUN4QixPQUFPRDtRQUNUO1FBQ0FZLElBQUk7UUFDSnRCLE9BQU8yQixhQUFhLENBQUNwQixHQUFHRyxFQUFFQyxDQUFDO1FBQzNCRCxFQUFFQyxDQUFDLElBQUk7UUFDUCxPQUFPRDtJQUNUO0lBQ0FrQixHQUFFckIsQ0FBQztRQUNEZSxJQUFJZjtRQUNKUCxPQUFPNkIsSUFBSSxDQUFDLEdBQUduQixFQUFFQyxDQUFDLEVBQUVELEVBQUVDLENBQUMsR0FBR0o7UUFDMUJHLEVBQUVDLENBQUMsSUFBSUo7UUFDUCxPQUFPRztJQUNUO0lBQ0FvQixLQUFJdkIsQ0FBQztRQUNIUCxTQUFTQyxPQUFPOEIsTUFBTSxDQUFDO1lBQUMvQixPQUFPZ0MsUUFBUSxDQUFDLEdBQUd0QixFQUFFQyxDQUFDO1lBQUdKO1NBQUU7UUFDbkRHLEVBQUVDLENBQUMsR0FBR1gsT0FBT29CLE1BQU07UUFDbkIsT0FBT1Y7SUFDVDtJQUNBdUIsS0FBSUMsS0FBSyxDQUFDO1FBQ1JsQyxPQUFPMkIsYUFBYSxDQUFDakIsRUFBRUMsQ0FBQyxHQUFHdUIsSUFBSUE7UUFDL0IsTUFBTUMsTUFBTW5DLE9BQU9nQyxRQUFRLENBQUMsR0FBR3RCLEVBQUVDLENBQUM7UUFDbENELEVBQUVDLENBQUMsR0FBRztRQUNOWCxTQUFTQyxPQUFPQyxXQUFXLENBQUNIO1FBQzVCLE9BQU9vQztJQUNUO0FBQ0Y7QUFFQSxpRUFBZXpCLENBQUNBLEVBQUE7QUFFaEIsU0FBU1ksSUFBSWYsQ0FBQztJQUNaLElBQUlQLE9BQU9vQixNQUFNLEdBQUdWLEVBQUVDLENBQUMsR0FBR0osR0FBRztRQUMzQixNQUFNNkIsT0FBT3BDLFFBQ1BvQixTQUFTZ0IsS0FBS2hCLE1BQU07UUFFMUJwQixTQUFTQyxPQUFPQyxXQUFXLENBQUNrQixTQUFVQSxDQUFBQSxVQUFVLEtBQUtiO1FBQ3JENkIsS0FBS0MsSUFBSSxDQUFDckM7SUFDWjtBQUNGO0FBRUEsU0FBU2M7SUFDUEosRUFBRUMsQ0FBQyxHQUFHO0lBQ04sT0FBT0Q7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL3BlcmlvZC10cmFja2VyLy4vbm9kZV9tb2R1bGVzL3Bvc3RncmVzL3NyYy9ieXRlcy5qcz9mYmQxIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHNpemUgPSAyNTZcbmxldCBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUoc2l6ZSlcblxuY29uc3QgbWVzc2FnZXMgPSAnQkNjRGRFRmZIUHBRU1gnLnNwbGl0KCcnKS5yZWR1Y2UoKGFjYywgeCkgPT4ge1xuICBjb25zdCB2ID0geC5jaGFyQ29kZUF0KDApXG4gIGFjY1t4XSA9ICgpID0+IHtcbiAgICBidWZmZXJbMF0gPSB2XG4gICAgYi5pID0gNVxuICAgIHJldHVybiBiXG4gIH1cbiAgcmV0dXJuIGFjY1xufSwge30pXG5cbmNvbnN0IGIgPSBPYmplY3QuYXNzaWduKHJlc2V0LCBtZXNzYWdlcywge1xuICBOOiBTdHJpbmcuZnJvbUNoYXJDb2RlKDApLFxuICBpOiAwLFxuICBpbmMoeCkge1xuICAgIGIuaSArPSB4XG4gICAgcmV0dXJuIGJcbiAgfSxcbiAgc3RyKHgpIHtcbiAgICBjb25zdCBsZW5ndGggPSBCdWZmZXIuYnl0ZUxlbmd0aCh4KVxuICAgIGZpdChsZW5ndGgpXG4gICAgYi5pICs9IGJ1ZmZlci53cml0ZSh4LCBiLmksIGxlbmd0aCwgJ3V0ZjgnKVxuICAgIHJldHVybiBiXG4gIH0sXG4gIGkxNih4KSB7XG4gICAgZml0KDIpXG4gICAgYnVmZmVyLndyaXRlVUludDE2QkUoeCwgYi5pKVxuICAgIGIuaSArPSAyXG4gICAgcmV0dXJuIGJcbiAgfSxcbiAgaTMyKHgsIGkpIHtcbiAgICBpZiAoaSB8fCBpID09PSAwKSB7XG4gICAgICBidWZmZXIud3JpdGVVSW50MzJCRSh4LCBpKVxuICAgICAgcmV0dXJuIGJcbiAgICB9XG4gICAgZml0KDQpXG4gICAgYnVmZmVyLndyaXRlVUludDMyQkUoeCwgYi5pKVxuICAgIGIuaSArPSA0XG4gICAgcmV0dXJuIGJcbiAgfSxcbiAgeih4KSB7XG4gICAgZml0KHgpXG4gICAgYnVmZmVyLmZpbGwoMCwgYi5pLCBiLmkgKyB4KVxuICAgIGIuaSArPSB4XG4gICAgcmV0dXJuIGJcbiAgfSxcbiAgcmF3KHgpIHtcbiAgICBidWZmZXIgPSBCdWZmZXIuY29uY2F0KFtidWZmZXIuc3ViYXJyYXkoMCwgYi5pKSwgeF0pXG4gICAgYi5pID0gYnVmZmVyLmxlbmd0aFxuICAgIHJldHVybiBiXG4gIH0sXG4gIGVuZChhdCA9IDEpIHtcbiAgICBidWZmZXIud3JpdGVVSW50MzJCRShiLmkgLSBhdCwgYXQpXG4gICAgY29uc3Qgb3V0ID0gYnVmZmVyLnN1YmFycmF5KDAsIGIuaSlcbiAgICBiLmkgPSAwXG4gICAgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKHNpemUpXG4gICAgcmV0dXJuIG91dFxuICB9XG59KVxuXG5leHBvcnQgZGVmYXVsdCBiXG5cbmZ1bmN0aW9uIGZpdCh4KSB7XG4gIGlmIChidWZmZXIubGVuZ3RoIC0gYi5pIDwgeCkge1xuICAgIGNvbnN0IHByZXYgPSBidWZmZXJcbiAgICAgICAgLCBsZW5ndGggPSBwcmV2Lmxlbmd0aFxuXG4gICAgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aCArIChsZW5ndGggPj4gMSkgKyB4KVxuICAgIHByZXYuY29weShidWZmZXIpXG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzZXQoKSB7XG4gIGIuaSA9IDBcbiAgcmV0dXJuIGJcbn1cbiJdLCJuYW1lcyI6WyJzaXplIiwiYnVmZmVyIiwiQnVmZmVyIiwiYWxsb2NVbnNhZmUiLCJtZXNzYWdlcyIsInNwbGl0IiwicmVkdWNlIiwiYWNjIiwieCIsInYiLCJjaGFyQ29kZUF0IiwiYiIsImkiLCJPYmplY3QiLCJhc3NpZ24iLCJyZXNldCIsIk4iLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJpbmMiLCJzdHIiLCJsZW5ndGgiLCJieXRlTGVuZ3RoIiwiZml0Iiwid3JpdGUiLCJpMTYiLCJ3cml0ZVVJbnQxNkJFIiwiaTMyIiwid3JpdGVVSW50MzJCRSIsInoiLCJmaWxsIiwicmF3IiwiY29uY2F0Iiwic3ViYXJyYXkiLCJlbmQiLCJhdCIsIm91dCIsInByZXYiLCJjb3B5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/postgres/src/bytes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/postgres/src/connection.js":
/*!*************************************************!*\
  !*** ./node_modules/postgres/src/connection.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var net__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! net */ \"net\");\n/* harmony import */ var tls__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tls */ \"tls\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! stream */ \"stream\");\n/* harmony import */ var perf_hooks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! perf_hooks */ \"perf_hooks\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./types.js */ \"(rsc)/./node_modules/postgres/src/types.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/postgres/src/errors.js\");\n/* harmony import */ var _result_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./result.js */ \"(rsc)/./node_modules/postgres/src/result.js\");\n/* harmony import */ var _queue_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./queue.js */ \"(rsc)/./node_modules/postgres/src/queue.js\");\n/* harmony import */ var _query_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./query.js */ \"(rsc)/./node_modules/postgres/src/query.js\");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./bytes.js */ \"(rsc)/./node_modules/postgres/src/bytes.js\");\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Connection);\nlet uid = 1;\nconst Sync = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().S().end(), Flush = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().H().end(), SSLRequest = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().i32(8).i32(80877103).end(8), ExecuteUnnamed = Buffer.concat([\n    (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().E().str(_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).i32(0).end(),\n    Sync\n]), DescribeUnnamed = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().D().str(\"S\").str(_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).end(), noop = ()=>{};\nconst retryRoutines = new Set([\n    \"FetchPreparedStatement\",\n    \"RevalidateCachedQuery\",\n    \"transformAssignedExpr\"\n]);\nconst errorFields = {\n    83: \"severity_local\",\n    86: \"severity\",\n    67: \"code\",\n    77: \"message\",\n    68: \"detail\",\n    72: \"hint\",\n    80: \"position\",\n    112: \"internal_position\",\n    113: \"internal_query\",\n    87: \"where\",\n    115: \"schema_name\",\n    116: \"table_name\",\n    99: \"column_name\",\n    100: \"data type_name\",\n    110: \"constraint_name\",\n    70: \"file\",\n    76: \"line\",\n    82: \"routine\" // R\n};\nfunction Connection(options, queues = {}, { onopen = noop, onend = noop, onclose = noop } = {}) {\n    const { ssl, max, user, host, port, database, parsers, transform, onnotice, onnotify, onparameter, max_pipeline, keep_alive, backoff, target_session_attrs } = options;\n    const sent = (0,_queue_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])(), id = uid++, backend = {\n        pid: null,\n        secret: null\n    }, idleTimer = timer(end, options.idle_timeout), lifeTimer = timer(end, options.max_lifetime), connectTimer = timer(connectTimedOut, options.connect_timeout);\n    let socket = null, cancelMessage, result = new _result_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"](), incoming = Buffer.alloc(0), needsTypes = options.fetch_types, backendParameters = {}, statements = {}, statementId = Math.random().toString(36).slice(2), statementCount = 1, closedDate = 0, remaining = 0, hostIndex = 0, retries = 0, length = 0, delay = 0, rows = 0, serverSignature = null, nextWriteTimer = null, terminated = false, incomings = null, results = null, initial = null, ending = null, stream = null, chunk = null, ended = null, nonce = null, query = null, final = null;\n    const connection = {\n        queue: queues.closed,\n        idleTimer,\n        connect (query) {\n            initial = query || true;\n            reconnect();\n        },\n        terminate,\n        execute,\n        cancel,\n        end,\n        count: 0,\n        id\n    };\n    queues.closed && queues.closed.push(connection);\n    return connection;\n    async function createSocket() {\n        let x;\n        try {\n            x = options.socket ? await Promise.resolve(options.socket(options)) : new net__WEBPACK_IMPORTED_MODULE_0__.Socket();\n        } catch (e) {\n            error(e);\n            return;\n        }\n        x.on(\"error\", error);\n        x.on(\"close\", closed);\n        x.on(\"drain\", drain);\n        return x;\n    }\n    async function cancel({ pid, secret }, resolve, reject) {\n        try {\n            cancelMessage = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().i32(16).i32(80877102).i32(pid).i32(secret).end(16);\n            await connect();\n            socket.once(\"error\", reject);\n            socket.once(\"close\", resolve);\n        } catch (error) {\n            reject(error);\n        }\n    }\n    function execute(q) {\n        if (terminated) return queryError(q, _errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.connection(\"CONNECTION_DESTROYED\", options));\n        if (q.cancelled) return;\n        try {\n            q.state = backend;\n            query ? sent.push(q) : (query = q, query.active = true);\n            build(q);\n            return write(toBuffer(q)) && !q.describeFirst && !q.cursorFn && sent.length < max_pipeline && (!q.options.onexecute || q.options.onexecute(connection));\n        } catch (error) {\n            sent.length === 0 && write(Sync);\n            errored(error);\n            return true;\n        }\n    }\n    function toBuffer(q) {\n        if (q.parameters.length >= 65534) throw _errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.generic(\"MAX_PARAMETERS_EXCEEDED\", \"Max number of parameters (65534) exceeded\");\n        return q.options.simple ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().Q().str(q.statement.string + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).end() : q.describeFirst ? Buffer.concat([\n            describe(q),\n            Flush\n        ]) : q.prepare ? q.prepared ? prepared(q) : Buffer.concat([\n            describe(q),\n            prepared(q)\n        ]) : unnamed(q);\n    }\n    function describe(q) {\n        return Buffer.concat([\n            Parse(q.statement.string, q.parameters, q.statement.types, q.statement.name),\n            Describe(\"S\", q.statement.name)\n        ]);\n    }\n    function prepared(q) {\n        return Buffer.concat([\n            Bind(q.parameters, q.statement.types, q.statement.name, q.cursorName),\n            q.cursorFn ? Execute(\"\", q.cursorRows) : ExecuteUnnamed\n        ]);\n    }\n    function unnamed(q) {\n        return Buffer.concat([\n            Parse(q.statement.string, q.parameters, q.statement.types),\n            DescribeUnnamed,\n            prepared(q)\n        ]);\n    }\n    function build(q) {\n        const parameters = [], types = [];\n        const string = (0,_types_js__WEBPACK_IMPORTED_MODULE_5__.stringify)(q, q.strings[0], q.args[0], parameters, types, options);\n        !q.tagged && q.args.forEach((x)=>(0,_types_js__WEBPACK_IMPORTED_MODULE_5__.handleValue)(x, parameters, types, options));\n        q.prepare = options.prepare && (\"prepare\" in q.options ? q.options.prepare : true);\n        q.string = string;\n        q.signature = q.prepare && types + string;\n        q.onlyDescribe && delete statements[q.signature];\n        q.parameters = q.parameters || parameters;\n        q.prepared = q.prepare && q.signature in statements;\n        q.describeFirst = q.onlyDescribe || parameters.length && !q.prepared;\n        q.statement = q.prepared ? statements[q.signature] : {\n            string,\n            types,\n            name: q.prepare ? statementId + statementCount++ : \"\"\n        };\n        typeof options.debug === \"function\" && options.debug(id, string, parameters, types);\n    }\n    function write(x, fn) {\n        chunk = chunk ? Buffer.concat([\n            chunk,\n            x\n        ]) : Buffer.from(x);\n        if (fn || chunk.length >= 1024) return nextWrite(fn);\n        nextWriteTimer === null && (nextWriteTimer = setImmediate(nextWrite));\n        return true;\n    }\n    function nextWrite(fn) {\n        const x = socket.write(chunk, fn);\n        nextWriteTimer !== null && clearImmediate(nextWriteTimer);\n        chunk = nextWriteTimer = null;\n        return x;\n    }\n    function connectTimedOut() {\n        errored(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.connection(\"CONNECT_TIMEOUT\", options, socket));\n        socket.destroy();\n    }\n    async function secure() {\n        write(SSLRequest);\n        const canSSL = await new Promise((r)=>socket.once(\"data\", (x)=>r(x[0] === 83))) // S\n        ;\n        if (!canSSL && ssl === \"prefer\") return connected();\n        socket.removeAllListeners();\n        socket = tls__WEBPACK_IMPORTED_MODULE_1__.connect({\n            socket,\n            servername: net__WEBPACK_IMPORTED_MODULE_0__.isIP(socket.host) ? undefined : socket.host,\n            ...ssl === \"require\" || ssl === \"allow\" || ssl === \"prefer\" ? {\n                rejectUnauthorized: false\n            } : ssl === \"verify-full\" ? {} : typeof ssl === \"object\" ? ssl : {}\n        });\n        socket.on(\"secureConnect\", connected);\n        socket.on(\"error\", error);\n        socket.on(\"close\", closed);\n        socket.on(\"drain\", drain);\n    }\n    /* c8 ignore next 3 */ function drain() {\n        !query && onopen(connection);\n    }\n    function data(x) {\n        if (incomings) {\n            incomings.push(x);\n            remaining -= x.length;\n            if (remaining >= 0) return;\n        }\n        incoming = incomings ? Buffer.concat(incomings, length - remaining) : incoming.length === 0 ? x : Buffer.concat([\n            incoming,\n            x\n        ], incoming.length + x.length);\n        while(incoming.length > 4){\n            length = incoming.readUInt32BE(1);\n            if (length >= incoming.length) {\n                remaining = length - incoming.length;\n                incomings = [\n                    incoming\n                ];\n                break;\n            }\n            try {\n                handle(incoming.subarray(0, length + 1));\n            } catch (e) {\n                query && (query.cursorFn || query.describeFirst) && write(Sync);\n                errored(e);\n            }\n            incoming = incoming.subarray(length + 1);\n            remaining = 0;\n            incomings = null;\n        }\n    }\n    async function connect() {\n        terminated = false;\n        backendParameters = {};\n        socket || (socket = await createSocket());\n        if (!socket) return;\n        connectTimer.start();\n        if (options.socket) return ssl ? secure() : connected();\n        socket.on(\"connect\", ssl ? secure : connected);\n        if (options.path) return socket.connect(options.path);\n        socket.ssl = ssl;\n        socket.connect(port[hostIndex], host[hostIndex]);\n        socket.host = host[hostIndex];\n        socket.port = port[hostIndex];\n        hostIndex = (hostIndex + 1) % port.length;\n    }\n    function reconnect() {\n        setTimeout(connect, closedDate ? closedDate + delay - perf_hooks__WEBPACK_IMPORTED_MODULE_4__.performance.now() : 0);\n    }\n    function connected() {\n        try {\n            statements = {};\n            needsTypes = options.fetch_types;\n            statementId = Math.random().toString(36).slice(2);\n            statementCount = 1;\n            lifeTimer.start();\n            socket.on(\"data\", data);\n            keep_alive && socket.setKeepAlive && socket.setKeepAlive(true, 1000 * keep_alive);\n            const s = StartupMessage();\n            write(s);\n        } catch (err) {\n            error(err);\n        }\n    }\n    function error(err) {\n        if (connection.queue === queues.connecting && options.host[retries + 1]) return;\n        errored(err);\n        while(sent.length)queryError(sent.shift(), err);\n    }\n    function errored(err) {\n        stream && (stream.destroy(err), stream = null);\n        query && queryError(query, err);\n        initial && (queryError(initial, err), initial = null);\n    }\n    function queryError(query, err) {\n        \"query\" in err || \"parameters\" in err || Object.defineProperties(err, {\n            stack: {\n                value: err.stack + query.origin.replace(/.*\\n/, \"\\n\"),\n                enumerable: options.debug\n            },\n            query: {\n                value: query.string,\n                enumerable: options.debug\n            },\n            parameters: {\n                value: query.parameters,\n                enumerable: options.debug\n            },\n            args: {\n                value: query.args,\n                enumerable: options.debug\n            },\n            types: {\n                value: query.statement && query.statement.types,\n                enumerable: options.debug\n            }\n        });\n        query.reject(err);\n    }\n    function end() {\n        return ending || (!connection.reserved && onend(connection), !connection.reserved && !initial && !query && sent.length === 0 ? (terminate(), new Promise((r)=>socket && socket.readyState !== \"closed\" ? socket.once(\"close\", r) : r())) : ending = new Promise((r)=>ended = r));\n    }\n    function terminate() {\n        terminated = true;\n        if (stream || query || initial || sent.length) error(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.connection(\"CONNECTION_DESTROYED\", options));\n        clearImmediate(nextWriteTimer);\n        if (socket) {\n            socket.removeListener(\"data\", data);\n            socket.removeListener(\"connect\", connected);\n            socket.readyState === \"open\" && socket.end((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().X().end());\n        }\n        ended && (ended(), ending = ended = null);\n    }\n    async function closed(hadError) {\n        incoming = Buffer.alloc(0);\n        remaining = 0;\n        incomings = null;\n        clearImmediate(nextWriteTimer);\n        socket.removeListener(\"data\", data);\n        socket.removeListener(\"connect\", connected);\n        idleTimer.cancel();\n        lifeTimer.cancel();\n        connectTimer.cancel();\n        socket.removeAllListeners();\n        socket = null;\n        if (initial) return reconnect();\n        !hadError && (query || sent.length) && error(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.connection(\"CONNECTION_CLOSED\", options, socket));\n        closedDate = perf_hooks__WEBPACK_IMPORTED_MODULE_4__.performance.now();\n        hadError && options.shared.retries++;\n        delay = (typeof backoff === \"function\" ? backoff(options.shared.retries) : backoff) * 1000;\n        onclose(connection, _errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.connection(\"CONNECTION_CLOSED\", options, socket));\n    }\n    /* Handlers */ function handle(xs, x = xs[0]) {\n        (x === 68 ? DataRow : x === 100 ? CopyData : x === 65 ? NotificationResponse : x === 83 ? ParameterStatus : x === 90 ? ReadyForQuery : x === 67 ? CommandComplete : x === 50 ? BindComplete : x === 49 ? ParseComplete : x === 116 ? ParameterDescription : x === 84 ? RowDescription : x === 82 ? Authentication : x === 110 ? NoData : x === 75 ? BackendKeyData : x === 69 ? ErrorResponse : x === 115 ? PortalSuspended : x === 51 ? CloseComplete : x === 71 ? CopyInResponse : x === 78 ? NoticeResponse : x === 72 ? CopyOutResponse : x === 99 ? CopyDone : x === 73 ? EmptyQueryResponse : x === 86 ? FunctionCallResponse : x === 118 ? NegotiateProtocolVersion : x === 87 ? CopyBothResponse : /* c8 ignore next */ UnknownMessage)(xs);\n    }\n    function DataRow(x) {\n        let index = 7;\n        let length;\n        let column;\n        let value;\n        const row = query.isRaw ? new Array(query.statement.columns.length) : {};\n        for(let i = 0; i < query.statement.columns.length; i++){\n            column = query.statement.columns[i];\n            length = x.readInt32BE(index);\n            index += 4;\n            value = length === -1 ? null : query.isRaw === true ? x.subarray(index, index += length) : column.parser === undefined ? x.toString(\"utf8\", index, index += length) : column.parser.array === true ? column.parser(x.toString(\"utf8\", index + 1, index += length)) : column.parser(x.toString(\"utf8\", index, index += length));\n            query.isRaw ? row[i] = query.isRaw === true ? value : transform.value.from ? transform.value.from(value, column) : value : row[column.name] = transform.value.from ? transform.value.from(value, column) : value;\n        }\n        query.forEachFn ? query.forEachFn(transform.row.from ? transform.row.from(row) : row, result) : result[rows++] = transform.row.from ? transform.row.from(row) : row;\n    }\n    function ParameterStatus(x) {\n        const [k, v] = x.toString(\"utf8\", 5, x.length - 1).split(_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N);\n        backendParameters[k] = v;\n        if (options.parameters[k] !== v) {\n            options.parameters[k] = v;\n            onparameter && onparameter(k, v);\n        }\n    }\n    function ReadyForQuery(x) {\n        query && query.options.simple && query.resolve(results || result);\n        query = results = null;\n        result = new _result_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]();\n        connectTimer.cancel();\n        if (initial) {\n            if (target_session_attrs) {\n                if (!backendParameters.in_hot_standby || !backendParameters.default_transaction_read_only) return fetchState();\n                else if (tryNext(target_session_attrs, backendParameters)) return terminate();\n            }\n            if (needsTypes) {\n                initial === true && (initial = null);\n                return fetchArrayTypes();\n            }\n            initial !== true && execute(initial);\n            options.shared.retries = retries = 0;\n            initial = null;\n            return;\n        }\n        while(sent.length && (query = sent.shift()) && (query.active = true, query.cancelled))Connection(options).cancel(query.state, query.cancelled.resolve, query.cancelled.reject);\n        if (query) return; // Consider opening if able and sent.length < 50\n        connection.reserved ? !connection.reserved.release && x[5] === 73 // I\n         ? ending ? terminate() : (connection.reserved = null, onopen(connection)) : connection.reserved() : ending ? terminate() : onopen(connection);\n    }\n    function CommandComplete(x) {\n        rows = 0;\n        for(let i = x.length - 1; i > 0; i--){\n            if (x[i] === 32 && x[i + 1] < 58 && result.count === null) result.count = +x.toString(\"utf8\", i + 1, x.length - 1);\n            if (x[i - 1] >= 65) {\n                result.command = x.toString(\"utf8\", 5, i);\n                result.state = backend;\n                break;\n            }\n        }\n        final && (final(), final = null);\n        if (result.command === \"BEGIN\" && max !== 1 && !connection.reserved) return errored(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.generic(\"UNSAFE_TRANSACTION\", \"Only use sql.begin, sql.reserved or max: 1\"));\n        if (query.options.simple) return BindComplete();\n        if (query.cursorFn) {\n            result.count && query.cursorFn(result);\n            write(Sync);\n        }\n        query.resolve(result);\n    }\n    function ParseComplete() {\n        query.parsing = false;\n    }\n    function BindComplete() {\n        !result.statement && (result.statement = query.statement);\n        result.columns = query.statement.columns;\n    }\n    function ParameterDescription(x) {\n        const length = x.readUInt16BE(5);\n        for(let i = 0; i < length; ++i)!query.statement.types[i] && (query.statement.types[i] = x.readUInt32BE(7 + i * 4));\n        query.prepare && (statements[query.signature] = query.statement);\n        query.describeFirst && !query.onlyDescribe && (write(prepared(query)), query.describeFirst = false);\n    }\n    function RowDescription(x) {\n        if (result.command) {\n            results = results || [\n                result\n            ];\n            results.push(result = new _result_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]());\n            result.count = null;\n            query.statement.columns = null;\n        }\n        const length = x.readUInt16BE(5);\n        let index = 7;\n        let start;\n        query.statement.columns = Array(length);\n        for(let i = 0; i < length; ++i){\n            start = index;\n            while(x[index++] !== 0);\n            const table = x.readUInt32BE(index);\n            const number = x.readUInt16BE(index + 4);\n            const type = x.readUInt32BE(index + 6);\n            query.statement.columns[i] = {\n                name: transform.column.from ? transform.column.from(x.toString(\"utf8\", start, index - 1)) : x.toString(\"utf8\", start, index - 1),\n                parser: parsers[type],\n                table,\n                number,\n                type\n            };\n            index += 18;\n        }\n        result.statement = query.statement;\n        if (query.onlyDescribe) return query.resolve(query.statement), write(Sync);\n    }\n    async function Authentication(x, type = x.readUInt32BE(5)) {\n        (type === 3 ? AuthenticationCleartextPassword : type === 5 ? AuthenticationMD5Password : type === 10 ? SASL : type === 11 ? SASLContinue : type === 12 ? SASLFinal : type !== 0 ? UnknownAuth : noop)(x, type);\n    }\n    /* c8 ignore next 5 */ async function AuthenticationCleartextPassword() {\n        const payload = await Pass();\n        write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().p().str(payload).z(1).end());\n    }\n    async function AuthenticationMD5Password(x) {\n        const payload = \"md5\" + await md5(Buffer.concat([\n            Buffer.from(await md5(await Pass() + user)),\n            x.subarray(9)\n        ]));\n        write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().p().str(payload).z(1).end());\n    }\n    async function SASL() {\n        nonce = (await crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes(18)).toString(\"base64\");\n        (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().p().str(\"SCRAM-SHA-256\" + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N);\n        const i = _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].i;\n        write(_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].inc(4).str(\"n,,n=*,r=\" + nonce).i32(_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].i - i - 4, i).end());\n    }\n    async function SASLContinue(x) {\n        const res = x.toString(\"utf8\", 9).split(\",\").reduce((acc, x)=>(acc[x[0]] = x.slice(2), acc), {});\n        const saltedPassword = await crypto__WEBPACK_IMPORTED_MODULE_2__.pbkdf2Sync(await Pass(), Buffer.from(res.s, \"base64\"), parseInt(res.i), 32, \"sha256\");\n        const clientKey = await hmac(saltedPassword, \"Client Key\");\n        const auth = \"n=*,r=\" + nonce + \",\" + \"r=\" + res.r + \",s=\" + res.s + \",i=\" + res.i + \",c=biws,r=\" + res.r;\n        serverSignature = (await hmac(await hmac(saltedPassword, \"Server Key\"), auth)).toString(\"base64\");\n        const payload = \"c=biws,r=\" + res.r + \",p=\" + xor(clientKey, Buffer.from(await hmac(await sha256(clientKey), auth))).toString(\"base64\");\n        write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().p().str(payload).end());\n    }\n    function SASLFinal(x) {\n        if (x.toString(\"utf8\", 9).split(_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N, 1)[0].slice(2) === serverSignature) return;\n        /* c8 ignore next 5 */ errored(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.generic(\"SASL_SIGNATURE_MISMATCH\", \"The server did not return the correct signature\"));\n        socket.destroy();\n    }\n    function Pass() {\n        return Promise.resolve(typeof options.pass === \"function\" ? options.pass() : options.pass);\n    }\n    function NoData() {\n        result.statement = query.statement;\n        result.statement.columns = [];\n        if (query.onlyDescribe) return query.resolve(query.statement), write(Sync);\n    }\n    function BackendKeyData(x) {\n        backend.pid = x.readUInt32BE(5);\n        backend.secret = x.readUInt32BE(9);\n    }\n    async function fetchArrayTypes() {\n        needsTypes = false;\n        const types = await new _query_js__WEBPACK_IMPORTED_MODULE_9__.Query([\n            `\n      select b.oid, b.typarray\n      from pg_catalog.pg_type a\n      left join pg_catalog.pg_type b on b.oid = a.typelem\n      where a.typcategory = 'A'\n      group by b.oid, b.typarray\n      order by b.oid\n    `\n        ], [], execute);\n        types.forEach(({ oid, typarray })=>addArrayType(oid, typarray));\n    }\n    function addArrayType(oid, typarray) {\n        if (!!options.parsers[typarray] && !!options.serializers[typarray]) return;\n        const parser = options.parsers[oid];\n        options.shared.typeArrayMap[oid] = typarray;\n        options.parsers[typarray] = (xs)=>(0,_types_js__WEBPACK_IMPORTED_MODULE_5__.arrayParser)(xs, parser, typarray);\n        options.parsers[typarray].array = true;\n        options.serializers[typarray] = (xs)=>(0,_types_js__WEBPACK_IMPORTED_MODULE_5__.arraySerializer)(xs, options.serializers[oid], options, typarray);\n    }\n    function tryNext(x, xs) {\n        return x === \"read-write\" && xs.default_transaction_read_only === \"on\" || x === \"read-only\" && xs.default_transaction_read_only === \"off\" || x === \"primary\" && xs.in_hot_standby === \"on\" || x === \"standby\" && xs.in_hot_standby === \"off\" || x === \"prefer-standby\" && xs.in_hot_standby === \"off\" && options.host[retries];\n    }\n    function fetchState() {\n        const query = new _query_js__WEBPACK_IMPORTED_MODULE_9__.Query([\n            `\n      show transaction_read_only;\n      select pg_catalog.pg_is_in_recovery()\n    `\n        ], [], execute, null, {\n            simple: true\n        });\n        query.resolve = ([[a], [b]])=>{\n            backendParameters.default_transaction_read_only = a.transaction_read_only;\n            backendParameters.in_hot_standby = b.pg_is_in_recovery ? \"on\" : \"off\";\n        };\n        query.execute();\n    }\n    function ErrorResponse(x) {\n        query && (query.cursorFn || query.describeFirst) && write(Sync);\n        const error = _errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.postgres(parseError(x));\n        query && query.retried ? errored(query.retried) : query && query.prepared && retryRoutines.has(error.routine) ? retry(query, error) : errored(error);\n    }\n    function retry(q, error) {\n        delete statements[q.signature];\n        q.retried = error;\n        execute(q);\n    }\n    function NotificationResponse(x) {\n        if (!onnotify) return;\n        let index = 9;\n        while(x[index++] !== 0);\n        onnotify(x.toString(\"utf8\", 9, index - 1), x.toString(\"utf8\", index, x.length - 1));\n    }\n    async function PortalSuspended() {\n        try {\n            const x = await Promise.resolve(query.cursorFn(result));\n            rows = 0;\n            x === _query_js__WEBPACK_IMPORTED_MODULE_9__.CLOSE ? write(Close(query.portal)) : (result = new _result_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"](), write(Execute(\"\", query.cursorRows)));\n        } catch (err) {\n            write(Sync);\n            query.reject(err);\n        }\n    }\n    function CloseComplete() {\n        result.count && query.cursorFn(result);\n        query.resolve(result);\n    }\n    function CopyInResponse() {\n        stream = new stream__WEBPACK_IMPORTED_MODULE_3__.Writable({\n            autoDestroy: true,\n            write (chunk, encoding, callback) {\n                socket.write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().d().raw(chunk).end(), callback);\n            },\n            destroy (error, callback) {\n                callback(error);\n                socket.write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().f().str(error + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).end());\n                stream = null;\n            },\n            final (callback) {\n                socket.write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().c().end());\n                final = callback;\n            }\n        });\n        query.resolve(stream);\n    }\n    function CopyOutResponse() {\n        stream = new stream__WEBPACK_IMPORTED_MODULE_3__.Readable({\n            read () {\n                socket.resume();\n            }\n        });\n        query.resolve(stream);\n    }\n    /* c8 ignore next 3 */ function CopyBothResponse() {\n        stream = new stream__WEBPACK_IMPORTED_MODULE_3__.Duplex({\n            autoDestroy: true,\n            read () {\n                socket.resume();\n            },\n            /* c8 ignore next 11 */ write (chunk, encoding, callback) {\n                socket.write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().d().raw(chunk).end(), callback);\n            },\n            destroy (error, callback) {\n                callback(error);\n                socket.write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().f().str(error + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).end());\n                stream = null;\n            },\n            final (callback) {\n                socket.write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().c().end());\n                final = callback;\n            }\n        });\n        query.resolve(stream);\n    }\n    function CopyData(x) {\n        stream && (stream.push(x.subarray(5)) || socket.pause());\n    }\n    function CopyDone() {\n        stream && stream.push(null);\n        stream = null;\n    }\n    function NoticeResponse(x) {\n        onnotice ? onnotice(parseError(x)) : console.log(parseError(x)) // eslint-disable-line\n        ;\n    }\n    /* c8 ignore next 3 */ function EmptyQueryResponse() {\n    /* noop */ }\n    /* c8 ignore next 3 */ function FunctionCallResponse() {\n        errored(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.notSupported(\"FunctionCallResponse\"));\n    }\n    /* c8 ignore next 3 */ function NegotiateProtocolVersion() {\n        errored(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.notSupported(\"NegotiateProtocolVersion\"));\n    }\n    /* c8 ignore next 3 */ function UnknownMessage(x) {\n        console.error(\"Postgres.js : Unknown Message:\", x[0]) // eslint-disable-line\n        ;\n    }\n    /* c8 ignore next 3 */ function UnknownAuth(x, type) {\n        console.error(\"Postgres.js : Unknown Auth:\", type) // eslint-disable-line\n        ;\n    }\n    /* Messages */ function Bind(parameters, types, statement = \"\", portal = \"\") {\n        let prev, type;\n        (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().B().str(portal + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).str(statement + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).i16(0).i16(parameters.length);\n        parameters.forEach((x, i)=>{\n            if (x === null) return _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].i32(0xFFFFFFFF);\n            type = types[i];\n            parameters[i] = x = type in options.serializers ? options.serializers[type](x) : \"\" + x;\n            prev = _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].i;\n            _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].inc(4).str(x).i32(_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].i - prev - 4, prev);\n        });\n        _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].i16(0);\n        return _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].end();\n    }\n    function Parse(str, parameters, types, name = \"\") {\n        (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().P().str(name + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).str(str + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).i16(parameters.length);\n        parameters.forEach((x, i)=>_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].i32(types[i] || 0));\n        return _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].end();\n    }\n    function Describe(x, name = \"\") {\n        return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().D().str(x).str(name + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).end();\n    }\n    function Execute(portal = \"\", rows = 0) {\n        return Buffer.concat([\n            (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().E().str(portal + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).i32(rows).end(),\n            Flush\n        ]);\n    }\n    function Close(portal = \"\") {\n        return Buffer.concat([\n            (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().C().str(\"P\").str(portal + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N).end(),\n            (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().S().end()\n        ]);\n    }\n    function StartupMessage() {\n        return cancelMessage || (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])().inc(4).i16(3).z(2).str(Object.entries(Object.assign({\n            user,\n            database,\n            client_encoding: \"UTF8\"\n        }, options.connection)).filter(([, v])=>v).map(([k, v])=>k + _bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N + v).join(_bytes_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].N)).z(2).end(0);\n    }\n}\nfunction parseError(x) {\n    const error = {};\n    let start = 5;\n    for(let i = 5; i < x.length - 1; i++){\n        if (x[i] === 0) {\n            error[errorFields[x[start]]] = x.toString(\"utf8\", start + 1, i);\n            start = i + 1;\n        }\n    }\n    return error;\n}\nfunction md5(x) {\n    return crypto__WEBPACK_IMPORTED_MODULE_2__.createHash(\"md5\").update(x).digest(\"hex\");\n}\nfunction hmac(key, x) {\n    return crypto__WEBPACK_IMPORTED_MODULE_2__.createHmac(\"sha256\", key).update(x).digest();\n}\nfunction sha256(x) {\n    return crypto__WEBPACK_IMPORTED_MODULE_2__.createHash(\"sha256\").update(x).digest();\n}\nfunction xor(a, b) {\n    const length = Math.max(a.length, b.length);\n    const buffer = Buffer.allocUnsafe(length);\n    for(let i = 0; i < length; i++)buffer[i] = a[i] ^ b[i];\n    return buffer;\n}\nfunction timer(fn, seconds) {\n    seconds = typeof seconds === \"function\" ? seconds() : seconds;\n    if (!seconds) return {\n        cancel: noop,\n        start: noop\n    };\n    let timer;\n    return {\n        cancel () {\n            timer && (clearTimeout(timer), timer = null);\n        },\n        start () {\n            timer && clearTimeout(timer);\n            timer = setTimeout(done, seconds * 1000, arguments);\n        }\n    };\n    function done(args) {\n        fn.apply(null, args);\n        timer = null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/postgres/src/connection.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/postgres/src/errors.js":
/*!*********************************************!*\
  !*** ./node_modules/postgres/src/errors.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Errors: () => (/* binding */ Errors),\n/* harmony export */   PostgresError: () => (/* binding */ PostgresError)\n/* harmony export */ });\nclass PostgresError extends Error {\n    constructor(x){\n        super(x.message);\n        this.name = this.constructor.name;\n        Object.assign(this, x);\n    }\n}\nconst Errors = {\n    connection,\n    postgres,\n    generic,\n    notSupported\n};\nfunction connection(x, options, socket) {\n    const { host, port } = socket || options;\n    const error = Object.assign(new Error(\"write \" + x + \" \" + (options.path || host + \":\" + port)), {\n        code: x,\n        errno: x,\n        address: options.path || host\n    }, options.path ? {} : {\n        port: port\n    });\n    Error.captureStackTrace(error, connection);\n    return error;\n}\nfunction postgres(x) {\n    const error = new PostgresError(x);\n    Error.captureStackTrace(error, postgres);\n    return error;\n}\nfunction generic(code, message) {\n    const error = Object.assign(new Error(code + \": \" + message), {\n        code\n    });\n    Error.captureStackTrace(error, generic);\n    return error;\n}\n/* c8 ignore next 10 */ function notSupported(x) {\n    const error = Object.assign(new Error(x + \" (B) is not supported\"), {\n        code: \"MESSAGE_NOT_SUPPORTED\",\n        name: x\n    });\n    Error.captureStackTrace(error, notSupported);\n    return error;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcG9zdGdyZXMvc3JjL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPLE1BQU1BLHNCQUFzQkM7SUFDakNDLFlBQVlDLENBQUMsQ0FBRTtRQUNiLEtBQUssQ0FBQ0EsRUFBRUMsT0FBTztRQUNmLElBQUksQ0FBQ0MsSUFBSSxHQUFHLElBQUksQ0FBQ0gsV0FBVyxDQUFDRyxJQUFJO1FBQ2pDQyxPQUFPQyxNQUFNLENBQUMsSUFBSSxFQUFFSjtJQUN0QjtBQUNGO0FBRU8sTUFBTUssU0FBUztJQUNwQkM7SUFDQUM7SUFDQUM7SUFDQUM7QUFDRixFQUFDO0FBRUQsU0FBU0gsV0FBV04sQ0FBQyxFQUFFVSxPQUFPLEVBQUVDLE1BQU07SUFDcEMsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLElBQUksRUFBRSxHQUFHRixVQUFVRDtJQUNqQyxNQUFNSSxRQUFRWCxPQUFPQyxNQUFNLENBQ3pCLElBQUlOLE1BQU8sV0FBV0UsSUFBSSxNQUFPVSxDQUFBQSxRQUFRSyxJQUFJLElBQUtILE9BQU8sTUFBTUMsSUFBSSxJQUNuRTtRQUNFRyxNQUFNaEI7UUFDTmlCLE9BQU9qQjtRQUNQa0IsU0FBU1IsUUFBUUssSUFBSSxJQUFJSDtJQUMzQixHQUFHRixRQUFRSyxJQUFJLEdBQUcsQ0FBQyxJQUFJO1FBQUVGLE1BQU1BO0lBQUs7SUFFdENmLE1BQU1xQixpQkFBaUIsQ0FBQ0wsT0FBT1I7SUFDL0IsT0FBT1E7QUFDVDtBQUVBLFNBQVNQLFNBQVNQLENBQUM7SUFDakIsTUFBTWMsUUFBUSxJQUFJakIsY0FBY0c7SUFDaENGLE1BQU1xQixpQkFBaUIsQ0FBQ0wsT0FBT1A7SUFDL0IsT0FBT087QUFDVDtBQUVBLFNBQVNOLFFBQVFRLElBQUksRUFBRWYsT0FBTztJQUM1QixNQUFNYSxRQUFRWCxPQUFPQyxNQUFNLENBQUMsSUFBSU4sTUFBTWtCLE9BQU8sT0FBT2YsVUFBVTtRQUFFZTtJQUFLO0lBQ3JFbEIsTUFBTXFCLGlCQUFpQixDQUFDTCxPQUFPTjtJQUMvQixPQUFPTTtBQUNUO0FBRUEscUJBQXFCLEdBQ3JCLFNBQVNMLGFBQWFULENBQUM7SUFDckIsTUFBTWMsUUFBUVgsT0FBT0MsTUFBTSxDQUN6QixJQUFJTixNQUFNRSxJQUFJLDBCQUNkO1FBQ0VnQixNQUFNO1FBQ05kLE1BQU1GO0lBQ1I7SUFFRkYsTUFBTXFCLGlCQUFpQixDQUFDTCxPQUFPTDtJQUMvQixPQUFPSztBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGVyaW9kLXRyYWNrZXIvLi9ub2RlX21vZHVsZXMvcG9zdGdyZXMvc3JjL2Vycm9ycy5qcz84ZDM5Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBQb3N0Z3Jlc0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcih4KSB7XG4gICAgc3VwZXIoeC5tZXNzYWdlKVxuICAgIHRoaXMubmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZVxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgeClcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgRXJyb3JzID0ge1xuICBjb25uZWN0aW9uLFxuICBwb3N0Z3JlcyxcbiAgZ2VuZXJpYyxcbiAgbm90U3VwcG9ydGVkXG59XG5cbmZ1bmN0aW9uIGNvbm5lY3Rpb24oeCwgb3B0aW9ucywgc29ja2V0KSB7XG4gIGNvbnN0IHsgaG9zdCwgcG9ydCB9ID0gc29ja2V0IHx8IG9wdGlvbnNcbiAgY29uc3QgZXJyb3IgPSBPYmplY3QuYXNzaWduKFxuICAgIG5ldyBFcnJvcigoJ3dyaXRlICcgKyB4ICsgJyAnICsgKG9wdGlvbnMucGF0aCB8fCAoaG9zdCArICc6JyArIHBvcnQpKSkpLFxuICAgIHtcbiAgICAgIGNvZGU6IHgsXG4gICAgICBlcnJubzogeCxcbiAgICAgIGFkZHJlc3M6IG9wdGlvbnMucGF0aCB8fCBob3N0XG4gICAgfSwgb3B0aW9ucy5wYXRoID8ge30gOiB7IHBvcnQ6IHBvcnQgfVxuICApXG4gIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGVycm9yLCBjb25uZWN0aW9uKVxuICByZXR1cm4gZXJyb3Jcbn1cblxuZnVuY3Rpb24gcG9zdGdyZXMoeCkge1xuICBjb25zdCBlcnJvciA9IG5ldyBQb3N0Z3Jlc0Vycm9yKHgpXG4gIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGVycm9yLCBwb3N0Z3JlcylcbiAgcmV0dXJuIGVycm9yXG59XG5cbmZ1bmN0aW9uIGdlbmVyaWMoY29kZSwgbWVzc2FnZSkge1xuICBjb25zdCBlcnJvciA9IE9iamVjdC5hc3NpZ24obmV3IEVycm9yKGNvZGUgKyAnOiAnICsgbWVzc2FnZSksIHsgY29kZSB9KVxuICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShlcnJvciwgZ2VuZXJpYylcbiAgcmV0dXJuIGVycm9yXG59XG5cbi8qIGM4IGlnbm9yZSBuZXh0IDEwICovXG5mdW5jdGlvbiBub3RTdXBwb3J0ZWQoeCkge1xuICBjb25zdCBlcnJvciA9IE9iamVjdC5hc3NpZ24oXG4gICAgbmV3IEVycm9yKHggKyAnIChCKSBpcyBub3Qgc3VwcG9ydGVkJyksXG4gICAge1xuICAgICAgY29kZTogJ01FU1NBR0VfTk9UX1NVUFBPUlRFRCcsXG4gICAgICBuYW1lOiB4XG4gICAgfVxuICApXG4gIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGVycm9yLCBub3RTdXBwb3J0ZWQpXG4gIHJldHVybiBlcnJvclxufVxuIl0sIm5hbWVzIjpbIlBvc3RncmVzRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwieCIsIm1lc3NhZ2UiLCJuYW1lIiwiT2JqZWN0IiwiYXNzaWduIiwiRXJyb3JzIiwiY29ubmVjdGlvbiIsInBvc3RncmVzIiwiZ2VuZXJpYyIsIm5vdFN1cHBvcnRlZCIsIm9wdGlvbnMiLCJzb2NrZXQiLCJob3N0IiwicG9ydCIsImVycm9yIiwicGF0aCIsImNvZGUiLCJlcnJubyIsImFkZHJlc3MiLCJjYXB0dXJlU3RhY2tUcmFjZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/postgres/src/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/postgres/src/index.js":
/*!********************************************!*\
  !*** ./node_modules/postgres/src/index.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! os */ \"os\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.js */ \"(rsc)/./node_modules/postgres/src/types.js\");\n/* harmony import */ var _connection_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./connection.js */ \"(rsc)/./node_modules/postgres/src/connection.js\");\n/* harmony import */ var _query_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./query.js */ \"(rsc)/./node_modules/postgres/src/query.js\");\n/* harmony import */ var _queue_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./queue.js */ \"(rsc)/./node_modules/postgres/src/queue.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/postgres/src/errors.js\");\n/* harmony import */ var _subscribe_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./subscribe.js */ \"(rsc)/./node_modules/postgres/src/subscribe.js\");\n/* harmony import */ var _large_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./large.js */ \"(rsc)/./node_modules/postgres/src/large.js\");\n\n\n\n\n\n\n\n\n\nObject.assign(Postgres, {\n    PostgresError: _errors_js__WEBPACK_IMPORTED_MODULE_6__.PostgresError,\n    toPascal: _types_js__WEBPACK_IMPORTED_MODULE_2__.toPascal,\n    pascal: _types_js__WEBPACK_IMPORTED_MODULE_2__.pascal,\n    toCamel: _types_js__WEBPACK_IMPORTED_MODULE_2__.toCamel,\n    camel: _types_js__WEBPACK_IMPORTED_MODULE_2__.camel,\n    toKebab: _types_js__WEBPACK_IMPORTED_MODULE_2__.toKebab,\n    kebab: _types_js__WEBPACK_IMPORTED_MODULE_2__.kebab,\n    fromPascal: _types_js__WEBPACK_IMPORTED_MODULE_2__.fromPascal,\n    fromCamel: _types_js__WEBPACK_IMPORTED_MODULE_2__.fromCamel,\n    fromKebab: _types_js__WEBPACK_IMPORTED_MODULE_2__.fromKebab,\n    BigInt: {\n        to: 20,\n        from: [\n            20\n        ],\n        parse: (x)=>BigInt(x),\n        serialize: (x)=>x.toString()\n    }\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Postgres);\nfunction Postgres(a, b) {\n    const options = parseOptions(a, b), subscribe = options.no_subscribe || (0,_subscribe_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(Postgres, {\n        ...options\n    });\n    let ending = false;\n    const queries = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(), connecting = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(), reserved = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(), closed = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(), ended = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(), open = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(), busy = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(), full = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(), queues = {\n        connecting,\n        reserved,\n        closed,\n        ended,\n        open,\n        busy,\n        full\n    };\n    const connections = [\n        ...Array(options.max)\n    ].map(()=>(0,_connection_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(options, queues, {\n            onopen,\n            onend,\n            onclose\n        }));\n    const sql = Sql(handler);\n    Object.assign(sql, {\n        get parameters () {\n            return options.parameters;\n        },\n        largeObject: _large_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"].bind(null, sql),\n        subscribe,\n        CLOSE: _query_js__WEBPACK_IMPORTED_MODULE_4__.CLOSE,\n        END: _query_js__WEBPACK_IMPORTED_MODULE_4__.CLOSE,\n        PostgresError: _errors_js__WEBPACK_IMPORTED_MODULE_6__.PostgresError,\n        options,\n        reserve,\n        listen,\n        begin,\n        close,\n        end\n    });\n    return sql;\n    function Sql(handler) {\n        handler.debug = options.debug;\n        Object.entries(options.types).reduce((acc, [name, type])=>{\n            acc[name] = (x)=>new _types_js__WEBPACK_IMPORTED_MODULE_2__.Parameter(x, type.to);\n            return acc;\n        }, typed);\n        Object.assign(sql, {\n            types: typed,\n            typed,\n            unsafe,\n            notify,\n            array,\n            json,\n            file\n        });\n        return sql;\n        function typed(value, type) {\n            return new _types_js__WEBPACK_IMPORTED_MODULE_2__.Parameter(value, type);\n        }\n        function sql(strings, ...args) {\n            const query = strings && Array.isArray(strings.raw) ? new _query_js__WEBPACK_IMPORTED_MODULE_4__.Query(strings, args, handler, cancel) : typeof strings === \"string\" && !args.length ? new _types_js__WEBPACK_IMPORTED_MODULE_2__.Identifier(options.transform.column.to ? options.transform.column.to(strings) : strings) : new _types_js__WEBPACK_IMPORTED_MODULE_2__.Builder(strings, args);\n            return query;\n        }\n        function unsafe(string, args = [], options = {}) {\n            arguments.length === 2 && !Array.isArray(args) && (options = args, args = []);\n            const query = new _query_js__WEBPACK_IMPORTED_MODULE_4__.Query([\n                string\n            ], args, handler, cancel, {\n                prepare: false,\n                ...options,\n                simple: \"simple\" in options ? options.simple : args.length === 0\n            });\n            return query;\n        }\n        function file(path, args = [], options = {}) {\n            arguments.length === 2 && !Array.isArray(args) && (options = args, args = []);\n            const query = new _query_js__WEBPACK_IMPORTED_MODULE_4__.Query([], args, (query)=>{\n                fs__WEBPACK_IMPORTED_MODULE_1__.readFile(path, \"utf8\", (err, string)=>{\n                    if (err) return query.reject(err);\n                    query.strings = [\n                        string\n                    ];\n                    handler(query);\n                });\n            }, cancel, {\n                ...options,\n                simple: \"simple\" in options ? options.simple : args.length === 0\n            });\n            return query;\n        }\n    }\n    async function listen(name, fn, onlisten) {\n        const listener = {\n            fn,\n            onlisten\n        };\n        const sql = listen.sql || (listen.sql = Postgres({\n            ...options,\n            max: 1,\n            idle_timeout: null,\n            max_lifetime: null,\n            fetch_types: false,\n            onclose () {\n                Object.entries(listen.channels).forEach(([name, { listeners }])=>{\n                    delete listen.channels[name];\n                    Promise.all(listeners.map((l)=>listen(name, l.fn, l.onlisten).catch(()=>{})));\n                });\n            },\n            onnotify (c, x) {\n                c in listen.channels && listen.channels[c].listeners.forEach((l)=>l.fn(x));\n            }\n        }));\n        const channels = listen.channels || (listen.channels = {}), exists = name in channels;\n        if (exists) {\n            channels[name].listeners.push(listener);\n            const result = await channels[name].result;\n            listener.onlisten && listener.onlisten();\n            return {\n                state: result.state,\n                unlisten\n            };\n        }\n        channels[name] = {\n            result: sql`listen ${sql.unsafe('\"' + name.replace(/\"/g, '\"\"') + '\"')}`,\n            listeners: [\n                listener\n            ]\n        };\n        const result = await channels[name].result;\n        listener.onlisten && listener.onlisten();\n        return {\n            state: result.state,\n            unlisten\n        };\n        async function unlisten() {\n            if (name in channels === false) return;\n            channels[name].listeners = channels[name].listeners.filter((x)=>x !== listener);\n            if (channels[name].listeners.length) return;\n            delete channels[name];\n            return sql`unlisten ${sql.unsafe('\"' + name.replace(/\"/g, '\"\"') + '\"')}`;\n        }\n    }\n    async function notify(channel, payload) {\n        return await sql`select pg_notify(${channel}, ${\"\" + payload})`;\n    }\n    async function reserve() {\n        const queue = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])();\n        const c = open.length ? open.shift() : await new Promise((r)=>{\n            queries.push({\n                reserve: r\n            });\n            closed.length && connect(closed.shift());\n        });\n        move(c, reserved);\n        c.reserved = ()=>queue.length ? c.execute(queue.shift()) : move(c, reserved);\n        c.reserved.release = true;\n        const sql = Sql(handler);\n        sql.release = ()=>{\n            c.reserved = null;\n            onopen(c);\n        };\n        return sql;\n        function handler(q) {\n            c.queue === full ? queue.push(q) : c.execute(q) || move(c, full);\n        }\n    }\n    async function begin(options, fn) {\n        !fn && (fn = options, options = \"\");\n        const queries = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])();\n        let savepoints = 0, connection, prepare = null;\n        try {\n            await sql.unsafe(\"begin \" + options.replace(/[^a-z ]/ig, \"\"), [], {\n                onexecute\n            }).execute();\n            return await Promise.race([\n                scope(connection, fn),\n                new Promise((_, reject)=>connection.onclose = reject)\n            ]);\n        } catch (error) {\n            throw error;\n        }\n        async function scope(c, fn, name) {\n            const sql = Sql(handler);\n            sql.savepoint = savepoint;\n            sql.prepare = (x)=>prepare = x.replace(/[^a-z0-9$-_. ]/gi);\n            let uncaughtError, result;\n            name && await sql`savepoint ${sql(name)}`;\n            try {\n                result = await new Promise((resolve, reject)=>{\n                    const x = fn(sql);\n                    Promise.resolve(Array.isArray(x) ? Promise.all(x) : x).then(resolve, reject);\n                });\n                if (uncaughtError) throw uncaughtError;\n            } catch (e) {\n                await (name ? sql`rollback to ${sql(name)}` : sql`rollback`);\n                throw e instanceof _errors_js__WEBPACK_IMPORTED_MODULE_6__.PostgresError && e.code === \"25P02\" && uncaughtError || e;\n            }\n            if (!name) {\n                prepare ? await sql`prepare transaction '${sql.unsafe(prepare)}'` : await sql`commit`;\n            }\n            return result;\n            function savepoint(name, fn) {\n                if (name && Array.isArray(name.raw)) return savepoint((sql)=>sql.apply(sql, arguments));\n                arguments.length === 1 && (fn = name, name = null);\n                return scope(c, fn, \"s\" + savepoints++ + (name ? \"_\" + name : \"\"));\n            }\n            function handler(q) {\n                q.catch((e)=>uncaughtError || (uncaughtError = e));\n                c.queue === full ? queries.push(q) : c.execute(q) || move(c, full);\n            }\n        }\n        function onexecute(c) {\n            connection = c;\n            move(c, reserved);\n            c.reserved = ()=>queries.length ? c.execute(queries.shift()) : move(c, reserved);\n        }\n    }\n    function move(c, queue) {\n        c.queue.remove(c);\n        queue.push(c);\n        c.queue = queue;\n        queue === open ? c.idleTimer.start() : c.idleTimer.cancel();\n        return c;\n    }\n    function json(x) {\n        return new _types_js__WEBPACK_IMPORTED_MODULE_2__.Parameter(x, 3802);\n    }\n    function array(x, type) {\n        if (!Array.isArray(x)) return array(Array.from(arguments));\n        return new _types_js__WEBPACK_IMPORTED_MODULE_2__.Parameter(x, type || (x.length ? (0,_types_js__WEBPACK_IMPORTED_MODULE_2__.inferType)(x) || 25 : 0), options.shared.typeArrayMap);\n    }\n    function handler(query) {\n        if (ending) return query.reject(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.connection(\"CONNECTION_ENDED\", options, options));\n        if (open.length) return go(open.shift(), query);\n        if (closed.length) return connect(closed.shift(), query);\n        busy.length ? go(busy.shift(), query) : queries.push(query);\n    }\n    function go(c, query) {\n        return c.execute(query) ? move(c, busy) : move(c, full);\n    }\n    function cancel(query) {\n        return new Promise((resolve, reject)=>{\n            query.state ? query.active ? (0,_connection_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(options).cancel(query.state, resolve, reject) : query.cancelled = {\n                resolve,\n                reject\n            } : (queries.remove(query), query.cancelled = true, query.reject(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.generic(\"57014\", \"canceling statement due to user request\")), resolve());\n        });\n    }\n    async function end({ timeout = null } = {}) {\n        if (ending) return ending;\n        await 1;\n        let timer;\n        return ending = Promise.race([\n            new Promise((r)=>timeout !== null && (timer = setTimeout(destroy, timeout * 1000, r))),\n            Promise.all(connections.map((c)=>c.end()).concat(listen.sql ? listen.sql.end({\n                timeout: 0\n            }) : [], subscribe.sql ? subscribe.sql.end({\n                timeout: 0\n            }) : []))\n        ]).then(()=>clearTimeout(timer));\n    }\n    async function close() {\n        await Promise.all(connections.map((c)=>c.end()));\n    }\n    async function destroy(resolve) {\n        await Promise.all(connections.map((c)=>c.terminate()));\n        while(queries.length)queries.shift().reject(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.connection(\"CONNECTION_DESTROYED\", options));\n        resolve();\n    }\n    function connect(c, query) {\n        move(c, connecting);\n        c.connect(query);\n        return c;\n    }\n    function onend(c) {\n        move(c, ended);\n    }\n    function onopen(c) {\n        if (queries.length === 0) return move(c, open);\n        let max = Math.ceil(queries.length / (connecting.length + 1)), ready = true;\n        while(ready && queries.length && max-- > 0){\n            const query = queries.shift();\n            if (query.reserve) return query.reserve(c);\n            ready = c.execute(query);\n        }\n        ready ? move(c, busy) : move(c, full);\n    }\n    function onclose(c, e) {\n        move(c, closed);\n        c.reserved = null;\n        c.onclose && (c.onclose(e), c.onclose = null);\n        options.onclose && options.onclose(c.id);\n        queries.length && connect(c, queries.shift());\n    }\n}\nfunction parseOptions(a, b) {\n    if (a && a.shared) return a;\n    const env = process.env // eslint-disable-line\n    , o = (!a || typeof a === \"string\" ? b : a) || {}, { url, multihost } = parseUrl(a), query = [\n        ...url.searchParams\n    ].reduce((a, [b, c])=>(a[b] = c, a), {}), host = o.hostname || o.host || multihost || url.hostname || env.PGHOST || \"localhost\", port = o.port || url.port || env.PGPORT || 5432, user = o.user || o.username || url.username || env.PGUSERNAME || env.PGUSER || osUsername();\n    o.no_prepare && (o.prepare = false);\n    query.sslmode && (query.ssl = query.sslmode, delete query.sslmode);\n    \"timeout\" in o && (console.log(\"The timeout option is deprecated, use idle_timeout instead\"), o.idle_timeout = o.timeout // eslint-disable-line\n    );\n    query.sslrootcert === \"system\" && (query.ssl = \"verify-full\");\n    const ints = [\n        \"idle_timeout\",\n        \"connect_timeout\",\n        \"max_lifetime\",\n        \"max_pipeline\",\n        \"backoff\",\n        \"keep_alive\"\n    ];\n    const defaults = {\n        max: 10,\n        ssl: false,\n        idle_timeout: null,\n        connect_timeout: 30,\n        max_lifetime: max_lifetime,\n        max_pipeline: 100,\n        backoff: backoff,\n        keep_alive: 60,\n        prepare: true,\n        debug: false,\n        fetch_types: true,\n        publications: \"alltables\",\n        target_session_attrs: null\n    };\n    return {\n        host: Array.isArray(host) ? host : host.split(\",\").map((x)=>x.split(\":\")[0]),\n        port: Array.isArray(port) ? port : host.split(\",\").map((x)=>parseInt(x.split(\":\")[1] || port)),\n        path: o.path || host.indexOf(\"/\") > -1 && host + \"/.s.PGSQL.\" + port,\n        database: o.database || o.db || (url.pathname || \"\").slice(1) || env.PGDATABASE || user,\n        user: user,\n        pass: o.pass || o.password || url.password || env.PGPASSWORD || \"\",\n        ...Object.entries(defaults).reduce((acc, [k, d])=>{\n            const value = k in o ? o[k] : k in query ? query[k] === \"disable\" || query[k] === \"false\" ? false : query[k] : env[\"PG\" + k.toUpperCase()] || d;\n            acc[k] = typeof value === \"string\" && ints.includes(k) ? +value : value;\n            return acc;\n        }, {}),\n        connection: {\n            application_name: \"postgres.js\",\n            ...o.connection,\n            ...Object.entries(query).reduce((acc, [k, v])=>(k in defaults || (acc[k] = v), acc), {})\n        },\n        types: o.types || {},\n        target_session_attrs: tsa(o, url, env),\n        onnotice: o.onnotice,\n        onnotify: o.onnotify,\n        onclose: o.onclose,\n        onparameter: o.onparameter,\n        socket: o.socket,\n        transform: parseTransform(o.transform || {\n            undefined: undefined\n        }),\n        parameters: {},\n        shared: {\n            retries: 0,\n            typeArrayMap: {}\n        },\n        ...(0,_types_js__WEBPACK_IMPORTED_MODULE_2__.mergeUserTypes)(o.types)\n    };\n}\nfunction tsa(o, url, env) {\n    const x = o.target_session_attrs || url.searchParams.get(\"target_session_attrs\") || env.PGTARGETSESSIONATTRS;\n    if (!x || [\n        \"read-write\",\n        \"read-only\",\n        \"primary\",\n        \"standby\",\n        \"prefer-standby\"\n    ].includes(x)) return x;\n    throw new Error(\"target_session_attrs \" + x + \" is not supported\");\n}\nfunction backoff(retries) {\n    return (0.5 + Math.random() / 2) * Math.min(3 ** retries / 100, 20);\n}\nfunction max_lifetime() {\n    return 60 * (30 + Math.random() * 30);\n}\nfunction parseTransform(x) {\n    return {\n        undefined: x.undefined,\n        column: {\n            from: typeof x.column === \"function\" ? x.column : x.column && x.column.from,\n            to: x.column && x.column.to\n        },\n        value: {\n            from: typeof x.value === \"function\" ? x.value : x.value && x.value.from,\n            to: x.value && x.value.to\n        },\n        row: {\n            from: typeof x.row === \"function\" ? x.row : x.row && x.row.from,\n            to: x.row && x.row.to\n        }\n    };\n}\nfunction parseUrl(url) {\n    if (!url || typeof url !== \"string\") return {\n        url: {\n            searchParams: new Map()\n        }\n    };\n    let host = url;\n    host = host.slice(host.indexOf(\"://\") + 3).split(/[?/]/)[0];\n    host = decodeURIComponent(host.slice(host.indexOf(\"@\") + 1));\n    const urlObj = new URL(url.replace(host, host.split(\",\")[0]));\n    return {\n        url: {\n            username: decodeURIComponent(urlObj.username),\n            password: decodeURIComponent(urlObj.password),\n            host: urlObj.host,\n            hostname: urlObj.hostname,\n            port: urlObj.port,\n            pathname: urlObj.pathname,\n            searchParams: urlObj.searchParams\n        },\n        multihost: host.indexOf(\",\") > -1 && host\n    };\n}\nfunction osUsername() {\n    try {\n        return os__WEBPACK_IMPORTED_MODULE_0__.userInfo().username // eslint-disable-line\n        ;\n    } catch (_) {\n        return process.env.USERNAME || process.env.USER || process.env.LOGNAME // eslint-disable-line\n        ;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcG9zdGdyZXMvc3JjL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBbUI7QUFDQTtBQWlCQTtBQUVxQjtBQUNDO0FBQ1g7QUFDcUI7QUFDYjtBQUNGO0FBRXBDd0IsT0FBT0MsTUFBTSxDQUFDQyxVQUFVO0lBQ3RCTCxhQUFhQSx1REFBQUE7SUFDYmQsUUFBUUEsaURBQUFBO0lBQ1JDLE1BQU1BLCtDQUFBQTtJQUNOQyxPQUFPQSxnREFBQUE7SUFDUEMsS0FBS0EsOENBQUFBO0lBQ0xDLE9BQU9BLGdEQUFBQTtJQUNQQyxLQUFLQSw4Q0FBQUE7SUFDTEMsVUFBVUEsbURBQUFBO0lBQ1ZDLFNBQVNBLGtEQUFBQTtJQUNUQyxTQUFTQSxrREFBQUE7SUFDVFksUUFBUTtRQUNOQyxJQUFJO1FBQ0pDLE1BQU07WUFBQztTQUFHO1FBQ1ZDLE9BQU9DLENBQUFBLElBQUtKLE9BQU9JO1FBQ25CQyxXQUFXRCxDQUFBQSxJQUFLQSxFQUFFRSxRQUFRO0lBQzVCO0FBQ0Y7QUFFQSxpRUFBZVAsUUFBUUEsRUFBQTtBQUV2QixTQUFTQSxTQUFTUSxDQUFDLEVBQUVDLENBQUM7SUFDcEIsTUFBTUMsVUFBVUMsYUFBYUgsR0FBR0MsSUFDMUJHLFlBQVlGLFFBQVFHLFlBQVksSUFBSWpCLHlEQUFTQSxDQUFDSSxVQUFVO1FBQUUsR0FBR1UsT0FBTztJQUFDO0lBRTNFLElBQUlJLFNBQVM7SUFFYixNQUFNQyxVQUFVdEIscURBQUtBLElBQ2Z1QixhQUFhdkIscURBQUtBLElBQ2xCd0IsV0FBV3hCLHFEQUFLQSxJQUNoQnlCLFNBQVN6QixxREFBS0EsSUFDZDBCLFFBQVExQixxREFBS0EsSUFDYjJCLE9BQU8zQixxREFBS0EsSUFDWjRCLE9BQU81QixxREFBS0EsSUFDWjZCLE9BQU83QixxREFBS0EsSUFDWjhCLFNBQVM7UUFBRVA7UUFBWUM7UUFBVUM7UUFBUUM7UUFBT0M7UUFBTUM7UUFBTUM7SUFBSztJQUV2RSxNQUFNRSxjQUFjO1dBQUlDLE1BQU1mLFFBQVFnQixHQUFHO0tBQUUsQ0FBQ0MsR0FBRyxDQUFDLElBQU1yQywwREFBVUEsQ0FBQ29CLFNBQVNhLFFBQVE7WUFBRUs7WUFBUUM7WUFBT0M7UUFBUTtJQUUzRyxNQUFNQyxNQUFNQyxJQUFJQztJQUVoQm5DLE9BQU9DLE1BQU0sQ0FBQ2dDLEtBQUs7UUFDakIsSUFBSUcsY0FBYTtZQUFFLE9BQU94QixRQUFRd0IsVUFBVTtRQUFDO1FBQzdDckMsYUFBYUEsaURBQVdBLENBQUNzQyxJQUFJLENBQUMsTUFBTUo7UUFDcENuQjtRQUNBcEIsS0FBS0EsOENBQUFBO1FBQ0w0QyxLQUFLNUMsNENBQUtBO1FBQ1ZHLGFBQWFBLHVEQUFBQTtRQUNiZTtRQUNBMkI7UUFDQUM7UUFDQUM7UUFDQUM7UUFDQUM7SUFDRjtJQUVBLE9BQU9WO0lBRVAsU0FBU0MsSUFBSUMsT0FBTztRQUNsQkEsUUFBUVMsS0FBSyxHQUFHaEMsUUFBUWdDLEtBQUs7UUFFN0I1QyxPQUFPNkMsT0FBTyxDQUFDakMsUUFBUWtDLEtBQUssRUFBRUMsTUFBTSxDQUFDLENBQUNDLEtBQUssQ0FBQ0MsTUFBTUMsS0FBSztZQUNyREYsR0FBRyxDQUFDQyxLQUFLLEdBQUcsQ0FBQzFDLElBQU0sSUFBSTNCLGdEQUFTQSxDQUFDMkIsR0FBRzJDLEtBQUs5QyxFQUFFO1lBQzNDLE9BQU80QztRQUNULEdBQUdHO1FBRUhuRCxPQUFPQyxNQUFNLENBQUNnQyxLQUFLO1lBQ2pCYSxPQUFPSztZQUNQQTtZQUNBQztZQUNBQztZQUNBQztZQUNBQztZQUNBQztRQUNGO1FBRUEsT0FBT3ZCO1FBRVAsU0FBU2tCLE1BQU1NLEtBQUssRUFBRVAsSUFBSTtZQUN4QixPQUFPLElBQUl0RSxnREFBU0EsQ0FBQzZFLE9BQU9QO1FBQzlCO1FBRUEsU0FBU2pCLElBQUl5QixPQUFPLEVBQUUsR0FBR0MsSUFBSTtZQUMzQixNQUFNQyxRQUFRRixXQUFXL0IsTUFBTWtDLE9BQU8sQ0FBQ0gsUUFBUUksR0FBRyxJQUM5QyxJQUFJckUsNENBQUtBLENBQUNpRSxTQUFTQyxNQUFNeEIsU0FBUzRCLFVBQ2xDLE9BQU9MLFlBQVksWUFBWSxDQUFDQyxLQUFLSyxNQUFNLEdBQ3pDLElBQUluRixpREFBVUEsQ0FBQytCLFFBQVFxRCxTQUFTLENBQUNDLE1BQU0sQ0FBQzlELEVBQUUsR0FBR1EsUUFBUXFELFNBQVMsQ0FBQ0MsTUFBTSxDQUFDOUQsRUFBRSxDQUFDc0QsV0FBV0EsV0FDcEYsSUFBSTVFLDhDQUFPQSxDQUFDNEUsU0FBU0M7WUFDM0IsT0FBT0M7UUFDVDtRQUVBLFNBQVNSLE9BQU9lLE1BQU0sRUFBRVIsT0FBTyxFQUFFLEVBQUUvQyxVQUFVLENBQUMsQ0FBQztZQUM3Q3dELFVBQVVKLE1BQU0sS0FBSyxLQUFLLENBQUNyQyxNQUFNa0MsT0FBTyxDQUFDRixTQUFVL0MsQ0FBQUEsVUFBVStDLE1BQU1BLE9BQU8sRUFBRTtZQUM1RSxNQUFNQyxRQUFRLElBQUluRSw0Q0FBS0EsQ0FBQztnQkFBQzBFO2FBQU8sRUFBRVIsTUFBTXhCLFNBQVM0QixRQUFRO2dCQUN2RE0sU0FBUztnQkFDVCxHQUFHekQsT0FBTztnQkFDVjBELFFBQVEsWUFBWTFELFVBQVVBLFFBQVEwRCxNQUFNLEdBQUdYLEtBQUtLLE1BQU0sS0FBSztZQUNqRTtZQUNBLE9BQU9KO1FBQ1Q7UUFFQSxTQUFTSixLQUFLZSxJQUFJLEVBQUVaLE9BQU8sRUFBRSxFQUFFL0MsVUFBVSxDQUFDLENBQUM7WUFDekN3RCxVQUFVSixNQUFNLEtBQUssS0FBSyxDQUFDckMsTUFBTWtDLE9BQU8sQ0FBQ0YsU0FBVS9DLENBQUFBLFVBQVUrQyxNQUFNQSxPQUFPLEVBQUU7WUFDNUUsTUFBTUMsUUFBUSxJQUFJbkUsNENBQUtBLENBQUMsRUFBRSxFQUFFa0UsTUFBTSxDQUFDQztnQkFDakNuRix3Q0FBVyxDQUFDOEYsTUFBTSxRQUFRLENBQUNFLEtBQUtOO29CQUM5QixJQUFJTSxLQUNGLE9BQU9iLE1BQU1jLE1BQU0sQ0FBQ0Q7b0JBRXRCYixNQUFNRixPQUFPLEdBQUc7d0JBQUNTO3FCQUFPO29CQUN4QmhDLFFBQVF5QjtnQkFDVjtZQUNGLEdBQUdHLFFBQVE7Z0JBQ1QsR0FBR25ELE9BQU87Z0JBQ1YwRCxRQUFRLFlBQVkxRCxVQUFVQSxRQUFRMEQsTUFBTSxHQUFHWCxLQUFLSyxNQUFNLEtBQUs7WUFDakU7WUFDQSxPQUFPSjtRQUNUO0lBQ0Y7SUFFQSxlQUFlcEIsT0FBT1MsSUFBSSxFQUFFMEIsRUFBRSxFQUFFQyxRQUFRO1FBQ3RDLE1BQU1DLFdBQVc7WUFBRUY7WUFBSUM7UUFBUztRQUVoQyxNQUFNM0MsTUFBTU8sT0FBT1AsR0FBRyxJQUFLTyxDQUFBQSxPQUFPUCxHQUFHLEdBQUcvQixTQUFTO1lBQy9DLEdBQUdVLE9BQU87WUFDVmdCLEtBQUs7WUFDTGtELGNBQWM7WUFDZEMsY0FBYztZQUNkQyxhQUFhO1lBQ2JoRDtnQkFDRWhDLE9BQU82QyxPQUFPLENBQUNMLE9BQU95QyxRQUFRLEVBQUVDLE9BQU8sQ0FBQyxDQUFDLENBQUNqQyxNQUFNLEVBQUVrQyxTQUFTLEVBQUUsQ0FBQztvQkFDNUQsT0FBTzNDLE9BQU95QyxRQUFRLENBQUNoQyxLQUFLO29CQUM1Qm1DLFFBQVFDLEdBQUcsQ0FBQ0YsVUFBVXRELEdBQUcsQ0FBQ3lELENBQUFBLElBQUs5QyxPQUFPUyxNQUFNcUMsRUFBRVgsRUFBRSxFQUFFVyxFQUFFVixRQUFRLEVBQUVXLEtBQUssQ0FBQyxLQUFtQjtnQkFDekY7WUFDRjtZQUNBQyxVQUFTQyxDQUFDLEVBQUVsRixDQUFDO2dCQUNYa0YsS0FBS2pELE9BQU95QyxRQUFRLElBQUl6QyxPQUFPeUMsUUFBUSxDQUFDUSxFQUFFLENBQUNOLFNBQVMsQ0FBQ0QsT0FBTyxDQUFDSSxDQUFBQSxJQUFLQSxFQUFFWCxFQUFFLENBQUNwRTtZQUN6RTtRQUNGLEVBQUM7UUFFRCxNQUFNMEUsV0FBV3pDLE9BQU95QyxRQUFRLElBQUt6QyxDQUFBQSxPQUFPeUMsUUFBUSxHQUFHLENBQUMsSUFDbERTLFNBQVN6QyxRQUFRZ0M7UUFFdkIsSUFBSVMsUUFBUTtZQUNWVCxRQUFRLENBQUNoQyxLQUFLLENBQUNrQyxTQUFTLENBQUNRLElBQUksQ0FBQ2Q7WUFDOUIsTUFBTWUsU0FBUyxNQUFNWCxRQUFRLENBQUNoQyxLQUFLLENBQUMyQyxNQUFNO1lBQzFDZixTQUFTRCxRQUFRLElBQUlDLFNBQVNELFFBQVE7WUFDdEMsT0FBTztnQkFBRWlCLE9BQU9ELE9BQU9DLEtBQUs7Z0JBQUVDO1lBQVM7UUFDekM7UUFFQWIsUUFBUSxDQUFDaEMsS0FBSyxHQUFHO1lBQUUyQyxRQUFRM0QsR0FBRyxDQUFDLE9BQU8sRUFDcENBLElBQUltQixNQUFNLENBQUMsTUFBTUgsS0FBSzhDLE9BQU8sQ0FBQyxNQUFNLFFBQVEsS0FDN0MsQ0FBQztZQUFFWixXQUFXO2dCQUFDTjthQUFTO1FBQUM7UUFDMUIsTUFBTWUsU0FBUyxNQUFNWCxRQUFRLENBQUNoQyxLQUFLLENBQUMyQyxNQUFNO1FBQzFDZixTQUFTRCxRQUFRLElBQUlDLFNBQVNELFFBQVE7UUFDdEMsT0FBTztZQUFFaUIsT0FBT0QsT0FBT0MsS0FBSztZQUFFQztRQUFTO1FBRXZDLGVBQWVBO1lBQ2IsSUFBSTdDLFFBQVFnQyxhQUFhLE9BQ3ZCO1lBRUZBLFFBQVEsQ0FBQ2hDLEtBQUssQ0FBQ2tDLFNBQVMsR0FBR0YsUUFBUSxDQUFDaEMsS0FBSyxDQUFDa0MsU0FBUyxDQUFDYSxNQUFNLENBQUN6RixDQUFBQSxJQUFLQSxNQUFNc0U7WUFDdEUsSUFBSUksUUFBUSxDQUFDaEMsS0FBSyxDQUFDa0MsU0FBUyxDQUFDbkIsTUFBTSxFQUNqQztZQUVGLE9BQU9pQixRQUFRLENBQUNoQyxLQUFLO1lBQ3JCLE9BQU9oQixHQUFHLENBQUMsU0FBUyxFQUNsQkEsSUFBSW1CLE1BQU0sQ0FBQyxNQUFNSCxLQUFLOEMsT0FBTyxDQUFDLE1BQU0sUUFBUSxLQUM3QyxDQUFDO1FBQ0o7SUFDRjtJQUVBLGVBQWUxQyxPQUFPNEMsT0FBTyxFQUFFQyxPQUFPO1FBQ3BDLE9BQU8sTUFBTWpFLEdBQUcsQ0FBQyxpQkFBaUIsRUFBR2dFLFFBQVMsRUFBRSxFQUFHLEtBQUtDLFFBQVMsQ0FBQyxDQUFDO0lBQ3JFO0lBRUEsZUFBZTNEO1FBQ2IsTUFBTTRELFFBQVF4RyxxREFBS0E7UUFDbkIsTUFBTThGLElBQUluRSxLQUFLMEMsTUFBTSxHQUNqQjFDLEtBQUs4RSxLQUFLLEtBQ1YsTUFBTSxJQUFJaEIsUUFBUWlCLENBQUFBO1lBQ2xCcEYsUUFBUTBFLElBQUksQ0FBQztnQkFBRXBELFNBQVM4RDtZQUFFO1lBQzFCakYsT0FBTzRDLE1BQU0sSUFBSXNDLFFBQVFsRixPQUFPZ0YsS0FBSztRQUN2QztRQUVGRyxLQUFLZCxHQUFHdEU7UUFDUnNFLEVBQUV0RSxRQUFRLEdBQUcsSUFBTWdGLE1BQU1uQyxNQUFNLEdBQzNCeUIsRUFBRWUsT0FBTyxDQUFDTCxNQUFNQyxLQUFLLE1BQ3JCRyxLQUFLZCxHQUFHdEU7UUFDWnNFLEVBQUV0RSxRQUFRLENBQUNzRixPQUFPLEdBQUc7UUFFckIsTUFBTXhFLE1BQU1DLElBQUlDO1FBQ2hCRixJQUFJd0UsT0FBTyxHQUFHO1lBQ1poQixFQUFFdEUsUUFBUSxHQUFHO1lBQ2JXLE9BQU8yRDtRQUNUO1FBRUEsT0FBT3hEO1FBRVAsU0FBU0UsUUFBUXVFLENBQUM7WUFDaEJqQixFQUFFVSxLQUFLLEtBQUszRSxPQUNSMkUsTUFBTVIsSUFBSSxDQUFDZSxLQUNYakIsRUFBRWUsT0FBTyxDQUFDRSxNQUFNSCxLQUFLZCxHQUFHakU7UUFDOUI7SUFDRjtJQUVBLGVBQWVpQixNQUFNN0IsT0FBTyxFQUFFK0QsRUFBRTtRQUM5QixDQUFDQSxNQUFPQSxDQUFBQSxLQUFLL0QsU0FBU0EsVUFBVSxFQUFDO1FBQ2pDLE1BQU1LLFVBQVV0QixxREFBS0E7UUFDckIsSUFBSWdILGFBQWEsR0FDYkMsWUFDQXZDLFVBQVU7UUFFZCxJQUFJO1lBQ0YsTUFBTXBDLElBQUltQixNQUFNLENBQUMsV0FBV3hDLFFBQVFtRixPQUFPLENBQUMsYUFBYSxLQUFLLEVBQUUsRUFBRTtnQkFBRWM7WUFBVSxHQUFHTCxPQUFPO1lBQ3hGLE9BQU8sTUFBTXBCLFFBQVEwQixJQUFJLENBQUM7Z0JBQ3hCQyxNQUFNSCxZQUFZakM7Z0JBQ2xCLElBQUlTLFFBQVEsQ0FBQzRCLEdBQUd0QyxTQUFXa0MsV0FBVzVFLE9BQU8sR0FBRzBDO2FBQ2pEO1FBQ0gsRUFBRSxPQUFPdUMsT0FBTztZQUNkLE1BQU1BO1FBQ1I7UUFFQSxlQUFlRixNQUFNdEIsQ0FBQyxFQUFFZCxFQUFFLEVBQUUxQixJQUFJO1lBQzlCLE1BQU1oQixNQUFNQyxJQUFJQztZQUNoQkYsSUFBSWlGLFNBQVMsR0FBR0E7WUFDaEJqRixJQUFJb0MsT0FBTyxHQUFHOUQsQ0FBQUEsSUFBSzhELFVBQVU5RCxFQUFFd0YsT0FBTyxDQUFDO1lBQ3ZDLElBQUlvQixlQUNBdkI7WUFFSjNDLFFBQVEsTUFBTWhCLEdBQUcsQ0FBQyxVQUFVLEVBQUdBLElBQUlnQixNQUFPLENBQUM7WUFDM0MsSUFBSTtnQkFDRjJDLFNBQVMsTUFBTSxJQUFJUixRQUFRLENBQUNnQyxTQUFTMUM7b0JBQ25DLE1BQU1uRSxJQUFJb0UsR0FBRzFDO29CQUNibUQsUUFBUWdDLE9BQU8sQ0FBQ3pGLE1BQU1rQyxPQUFPLENBQUN0RCxLQUFLNkUsUUFBUUMsR0FBRyxDQUFDOUUsS0FBS0EsR0FBRzhHLElBQUksQ0FBQ0QsU0FBUzFDO2dCQUN2RTtnQkFFQSxJQUFJeUMsZUFDRixNQUFNQTtZQUNWLEVBQUUsT0FBT0csR0FBRztnQkFDVixNQUFPckUsQ0FBQUEsT0FDSGhCLEdBQUcsQ0FBQyxZQUFZLEVBQUdBLElBQUlnQixNQUFPLENBQUMsR0FDL0JoQixHQUFHLENBQUMsUUFBUSxDQUFDO2dCQUVqQixNQUFNcUYsYUFBYXpILHFEQUFhQSxJQUFJeUgsRUFBRUMsSUFBSSxLQUFLLFdBQVdKLGlCQUFpQkc7WUFDN0U7WUFFQSxJQUFJLENBQUNyRSxNQUFNO2dCQUNUb0IsVUFDSSxNQUFNcEMsR0FBRyxDQUFDLHFCQUFxQixFQUFHQSxJQUFJbUIsTUFBTSxDQUFDaUIsU0FBVSxDQUFDLENBQUMsR0FDekQsTUFBTXBDLEdBQUcsQ0FBQyxNQUFNLENBQUM7WUFDdkI7WUFFQSxPQUFPMkQ7WUFFUCxTQUFTc0IsVUFBVWpFLElBQUksRUFBRTBCLEVBQUU7Z0JBQ3pCLElBQUkxQixRQUFRdEIsTUFBTWtDLE9BQU8sQ0FBQ1osS0FBS2EsR0FBRyxHQUNoQyxPQUFPb0QsVUFBVWpGLENBQUFBLE1BQU9BLElBQUl1RixLQUFLLENBQUN2RixLQUFLbUM7Z0JBRXpDQSxVQUFVSixNQUFNLEtBQUssS0FBTVcsQ0FBQUEsS0FBSzFCLE1BQU1BLE9BQU8sSUFBRztnQkFDaEQsT0FBTzhELE1BQU10QixHQUFHZCxJQUFJLE1BQU1nQyxlQUFnQjFELENBQUFBLE9BQU8sTUFBTUEsT0FBTyxFQUFDO1lBQ2pFO1lBRUEsU0FBU2QsUUFBUXVFLENBQUM7Z0JBQ2hCQSxFQUFFbkIsS0FBSyxDQUFDK0IsQ0FBQUEsSUFBS0gsaUJBQWtCQSxDQUFBQSxnQkFBZ0JHLENBQUFBO2dCQUMvQzdCLEVBQUVVLEtBQUssS0FBSzNFLE9BQ1JQLFFBQVEwRSxJQUFJLENBQUNlLEtBQ2JqQixFQUFFZSxPQUFPLENBQUNFLE1BQU1ILEtBQUtkLEdBQUdqRTtZQUM5QjtRQUNGO1FBRUEsU0FBU3FGLFVBQVVwQixDQUFDO1lBQ2xCbUIsYUFBYW5CO1lBQ2JjLEtBQUtkLEdBQUd0RTtZQUNSc0UsRUFBRXRFLFFBQVEsR0FBRyxJQUFNRixRQUFRK0MsTUFBTSxHQUM3QnlCLEVBQUVlLE9BQU8sQ0FBQ3ZGLFFBQVFtRixLQUFLLE1BQ3ZCRyxLQUFLZCxHQUFHdEU7UUFDZDtJQUNGO0lBRUEsU0FBU29GLEtBQUtkLENBQUMsRUFBRVUsS0FBSztRQUNwQlYsRUFBRVUsS0FBSyxDQUFDc0IsTUFBTSxDQUFDaEM7UUFDZlUsTUFBTVIsSUFBSSxDQUFDRjtRQUNYQSxFQUFFVSxLQUFLLEdBQUdBO1FBQ1ZBLFVBQVU3RSxPQUNObUUsRUFBRWlDLFNBQVMsQ0FBQ0MsS0FBSyxLQUNqQmxDLEVBQUVpQyxTQUFTLENBQUMzRCxNQUFNO1FBQ3RCLE9BQU8wQjtJQUNUO0lBRUEsU0FBU2xDLEtBQUtoRCxDQUFDO1FBQ2IsT0FBTyxJQUFJM0IsZ0RBQVNBLENBQUMyQixHQUFHO0lBQzFCO0lBRUEsU0FBUytDLE1BQU0vQyxDQUFDLEVBQUUyQyxJQUFJO1FBQ3BCLElBQUksQ0FBQ3ZCLE1BQU1rQyxPQUFPLENBQUN0RCxJQUNqQixPQUFPK0MsTUFBTTNCLE1BQU10QixJQUFJLENBQUMrRDtRQUUxQixPQUFPLElBQUl4RixnREFBU0EsQ0FBQzJCLEdBQUcyQyxRQUFTM0MsQ0FBQUEsRUFBRXlELE1BQU0sR0FBR3JGLG9EQUFTQSxDQUFDNEIsTUFBTSxLQUFLLElBQUlLLFFBQVFnSCxNQUFNLENBQUNDLFlBQVk7SUFDbEc7SUFFQSxTQUFTMUYsUUFBUXlCLEtBQUs7UUFDcEIsSUFBSTVDLFFBQ0YsT0FBTzRDLE1BQU1jLE1BQU0sQ0FBQzlFLDhDQUFNQSxDQUFDZ0gsVUFBVSxDQUFDLG9CQUFvQmhHLFNBQVNBO1FBRXJFLElBQUlVLEtBQUswQyxNQUFNLEVBQ2IsT0FBTzhELEdBQUd4RyxLQUFLOEUsS0FBSyxJQUFJeEM7UUFFMUIsSUFBSXhDLE9BQU80QyxNQUFNLEVBQ2YsT0FBT3NDLFFBQVFsRixPQUFPZ0YsS0FBSyxJQUFJeEM7UUFFakNyQyxLQUFLeUMsTUFBTSxHQUNQOEQsR0FBR3ZHLEtBQUs2RSxLQUFLLElBQUl4QyxTQUNqQjNDLFFBQVEwRSxJQUFJLENBQUMvQjtJQUNuQjtJQUVBLFNBQVNrRSxHQUFHckMsQ0FBQyxFQUFFN0IsS0FBSztRQUNsQixPQUFPNkIsRUFBRWUsT0FBTyxDQUFDNUMsU0FDYjJDLEtBQUtkLEdBQUdsRSxRQUNSZ0YsS0FBS2QsR0FBR2pFO0lBQ2Q7SUFFQSxTQUFTdUMsT0FBT0gsS0FBSztRQUNuQixPQUFPLElBQUl3QixRQUFRLENBQUNnQyxTQUFTMUM7WUFDM0JkLE1BQU1pQyxLQUFLLEdBQ1BqQyxNQUFNbUUsTUFBTSxHQUNWdkksMERBQVVBLENBQUNvQixTQUFTbUQsTUFBTSxDQUFDSCxNQUFNaUMsS0FBSyxFQUFFdUIsU0FBUzFDLFVBQ2pEZCxNQUFNb0UsU0FBUyxHQUFHO2dCQUFFWjtnQkFBUzFDO1lBQU8sSUFFdEN6RCxDQUFBQSxRQUFRd0csTUFBTSxDQUFDN0QsUUFDZkEsTUFBTW9FLFNBQVMsR0FBRyxNQUNsQnBFLE1BQU1jLE1BQU0sQ0FBQzlFLDhDQUFNQSxDQUFDcUksT0FBTyxDQUFDLFNBQVMsNkNBQ3JDYixTQUFRO1FBRWQ7SUFDRjtJQUVBLGVBQWV6RSxJQUFJLEVBQUV1RixVQUFVLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN4QyxJQUFJbEgsUUFDRixPQUFPQTtRQUVULE1BQU07UUFDTixJQUFJbUg7UUFDSixPQUFPbkgsU0FBU29FLFFBQVEwQixJQUFJLENBQUM7WUFDM0IsSUFBSTFCLFFBQVFpQixDQUFBQSxJQUFLNkIsWUFBWSxRQUFTQyxDQUFBQSxRQUFRQyxXQUFXQyxTQUFTSCxVQUFVLE1BQU03QixFQUFDO1lBQ25GakIsUUFBUUMsR0FBRyxDQUFDM0QsWUFBWUcsR0FBRyxDQUFDNEQsQ0FBQUEsSUFBS0EsRUFBRTlDLEdBQUcsSUFBSTJGLE1BQU0sQ0FDOUM5RixPQUFPUCxHQUFHLEdBQUdPLE9BQU9QLEdBQUcsQ0FBQ1UsR0FBRyxDQUFDO2dCQUFFdUYsU0FBUztZQUFFLEtBQUssRUFBRSxFQUNoRHBILFVBQVVtQixHQUFHLEdBQUduQixVQUFVbUIsR0FBRyxDQUFDVSxHQUFHLENBQUM7Z0JBQUV1RixTQUFTO1lBQUUsS0FBSyxFQUFFO1NBRXpELEVBQUViLElBQUksQ0FBQyxJQUFNa0IsYUFBYUo7SUFDN0I7SUFFQSxlQUFlekY7UUFDYixNQUFNMEMsUUFBUUMsR0FBRyxDQUFDM0QsWUFBWUcsR0FBRyxDQUFDNEQsQ0FBQUEsSUFBS0EsRUFBRTlDLEdBQUc7SUFDOUM7SUFFQSxlQUFlMEYsUUFBUWpCLE9BQU87UUFDNUIsTUFBTWhDLFFBQVFDLEdBQUcsQ0FBQzNELFlBQVlHLEdBQUcsQ0FBQzRELENBQUFBLElBQUtBLEVBQUUrQyxTQUFTO1FBQ2xELE1BQU92SCxRQUFRK0MsTUFBTSxDQUNuQi9DLFFBQVFtRixLQUFLLEdBQUcxQixNQUFNLENBQUM5RSw4Q0FBTUEsQ0FBQ2dILFVBQVUsQ0FBQyx3QkFBd0JoRztRQUNuRXdHO0lBQ0Y7SUFFQSxTQUFTZCxRQUFRYixDQUFDLEVBQUU3QixLQUFLO1FBQ3ZCMkMsS0FBS2QsR0FBR3ZFO1FBQ1J1RSxFQUFFYSxPQUFPLENBQUMxQztRQUNWLE9BQU82QjtJQUNUO0lBRUEsU0FBUzFELE1BQU0wRCxDQUFDO1FBQ2RjLEtBQUtkLEdBQUdwRTtJQUNWO0lBRUEsU0FBU1MsT0FBTzJELENBQUM7UUFDZixJQUFJeEUsUUFBUStDLE1BQU0sS0FBSyxHQUNyQixPQUFPdUMsS0FBS2QsR0FBR25FO1FBRWpCLElBQUlNLE1BQU02RyxLQUFLQyxJQUFJLENBQUN6SCxRQUFRK0MsTUFBTSxHQUFJOUMsQ0FBQUEsV0FBVzhDLE1BQU0sR0FBRyxLQUN0RDJFLFFBQVE7UUFFWixNQUFPQSxTQUFTMUgsUUFBUStDLE1BQU0sSUFBSXBDLFFBQVEsRUFBRztZQUMzQyxNQUFNZ0MsUUFBUTNDLFFBQVFtRixLQUFLO1lBQzNCLElBQUl4QyxNQUFNckIsT0FBTyxFQUNmLE9BQU9xQixNQUFNckIsT0FBTyxDQUFDa0Q7WUFFdkJrRCxRQUFRbEQsRUFBRWUsT0FBTyxDQUFDNUM7UUFDcEI7UUFFQStFLFFBQ0lwQyxLQUFLZCxHQUFHbEUsUUFDUmdGLEtBQUtkLEdBQUdqRTtJQUNkO0lBRUEsU0FBU1EsUUFBUXlELENBQUMsRUFBRTZCLENBQUM7UUFDbkJmLEtBQUtkLEdBQUdyRTtRQUNScUUsRUFBRXRFLFFBQVEsR0FBRztRQUNic0UsRUFBRXpELE9BQU8sSUFBS3lELENBQUFBLEVBQUV6RCxPQUFPLENBQUNzRixJQUFJN0IsRUFBRXpELE9BQU8sR0FBRyxJQUFHO1FBQzNDcEIsUUFBUW9CLE9BQU8sSUFBSXBCLFFBQVFvQixPQUFPLENBQUN5RCxFQUFFbUQsRUFBRTtRQUN2QzNILFFBQVErQyxNQUFNLElBQUlzQyxRQUFRYixHQUFHeEUsUUFBUW1GLEtBQUs7SUFDNUM7QUFDRjtBQUVBLFNBQVN2RixhQUFhSCxDQUFDLEVBQUVDLENBQUM7SUFDeEIsSUFBSUQsS0FBS0EsRUFBRWtILE1BQU0sRUFDZixPQUFPbEg7SUFFVCxNQUFNbUksTUFBTUMsUUFBUUQsR0FBRyxDQUFDLHNCQUFzQjtNQUN4Q0UsSUFBSSxDQUFDLENBQUNySSxLQUFLLE9BQU9BLE1BQU0sV0FBV0MsSUFBSUQsQ0FBQUEsS0FBTSxDQUFDLEdBQzlDLEVBQUVzSSxHQUFHLEVBQUVDLFNBQVMsRUFBRSxHQUFHQyxTQUFTeEksSUFDOUJrRCxRQUFRO1dBQUlvRixJQUFJRyxZQUFZO0tBQUMsQ0FBQ3BHLE1BQU0sQ0FBQyxDQUFDckMsR0FBRyxDQUFDQyxHQUFHOEUsRUFBRSxHQUFNL0UsQ0FBQUEsQ0FBQyxDQUFDQyxFQUFFLEdBQUc4RSxHQUFHL0UsQ0FBQUEsR0FBSSxDQUFDLElBQ3BFMEksT0FBT0wsRUFBRU0sUUFBUSxJQUFJTixFQUFFSyxJQUFJLElBQUlILGFBQWFELElBQUlLLFFBQVEsSUFBSVIsSUFBSVMsTUFBTSxJQUFJLGFBQzFFQyxPQUFPUixFQUFFUSxJQUFJLElBQUlQLElBQUlPLElBQUksSUFBSVYsSUFBSVcsTUFBTSxJQUFJLE1BQzNDQyxPQUFPVixFQUFFVSxJQUFJLElBQUlWLEVBQUVXLFFBQVEsSUFBSVYsSUFBSVUsUUFBUSxJQUFJYixJQUFJYyxVQUFVLElBQUlkLElBQUllLE1BQU0sSUFBSUM7SUFFckZkLEVBQUVlLFVBQVUsSUFBS2YsQ0FBQUEsRUFBRTFFLE9BQU8sR0FBRyxLQUFJO0lBQ2pDVCxNQUFNbUcsT0FBTyxJQUFLbkcsQ0FBQUEsTUFBTW9HLEdBQUcsR0FBR3BHLE1BQU1tRyxPQUFPLEVBQUUsT0FBT25HLE1BQU1tRyxPQUFPO0lBQ2pFLGFBQWFoQixLQUFNa0IsQ0FBQUEsUUFBUUMsR0FBRyxDQUFDLCtEQUErRG5CLEVBQUVqRSxZQUFZLEdBQUdpRSxFQUFFYixPQUFPLENBQUUsc0JBQXNCO0lBQXpCO0lBQ3ZIdEUsTUFBTXVHLFdBQVcsS0FBSyxZQUFhdkcsQ0FBQUEsTUFBTW9HLEdBQUcsR0FBRyxhQUFZO0lBRTNELE1BQU1JLE9BQU87UUFBQztRQUFnQjtRQUFtQjtRQUFnQjtRQUFnQjtRQUFXO0tBQWE7SUFDekcsTUFBTUMsV0FBVztRQUNmekksS0FBa0I7UUFDbEJvSSxLQUFrQjtRQUNsQmxGLGNBQWtCO1FBQ2xCd0YsaUJBQWtCO1FBQ2xCdkYsY0FBa0JBO1FBQ2xCd0YsY0FBa0I7UUFDbEJDLFNBQWtCQTtRQUNsQkMsWUFBa0I7UUFDbEJwRyxTQUFrQjtRQUNsQnpCLE9BQWtCO1FBQ2xCb0MsYUFBa0I7UUFDbEIwRixjQUFrQjtRQUNsQkMsc0JBQXNCO0lBQ3hCO0lBRUEsT0FBTztRQUNMdkIsTUFBa0J6SCxNQUFNa0MsT0FBTyxDQUFDdUYsUUFBUUEsT0FBT0EsS0FBS3dCLEtBQUssQ0FBQyxLQUFLL0ksR0FBRyxDQUFDdEIsQ0FBQUEsSUFBS0EsRUFBRXFLLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUN2RnJCLE1BQWtCNUgsTUFBTWtDLE9BQU8sQ0FBQzBGLFFBQVFBLE9BQU9ILEtBQUt3QixLQUFLLENBQUMsS0FBSy9JLEdBQUcsQ0FBQ3RCLENBQUFBLElBQUtzSyxTQUFTdEssRUFBRXFLLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJckI7UUFDcEdoRixNQUFrQndFLEVBQUV4RSxJQUFJLElBQUk2RSxLQUFLMEIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLMUIsT0FBTyxlQUFlRztRQUM1RXdCLFVBQWtCaEMsRUFBRWdDLFFBQVEsSUFBSWhDLEVBQUVpQyxFQUFFLElBQUksQ0FBQ2hDLElBQUlpQyxRQUFRLElBQUksRUFBQyxFQUFHQyxLQUFLLENBQUMsTUFBTXJDLElBQUlzQyxVQUFVLElBQUkxQjtRQUMzRkEsTUFBa0JBO1FBQ2xCMkIsTUFBa0JyQyxFQUFFcUMsSUFBSSxJQUFJckMsRUFBRXNDLFFBQVEsSUFBSXJDLElBQUlxQyxRQUFRLElBQUl4QyxJQUFJeUMsVUFBVSxJQUFJO1FBQzVFLEdBQUd0TCxPQUFPNkMsT0FBTyxDQUFDd0gsVUFBVXRILE1BQU0sQ0FDaEMsQ0FBQ0MsS0FBSyxDQUFDdUksR0FBR0MsRUFBRTtZQUNWLE1BQU0vSCxRQUFROEgsS0FBS3hDLElBQUlBLENBQUMsQ0FBQ3dDLEVBQUUsR0FBR0EsS0FBSzNILFFBQzlCQSxLQUFLLENBQUMySCxFQUFFLEtBQUssYUFBYTNILEtBQUssQ0FBQzJILEVBQUUsS0FBSyxVQUFVLFFBQVEzSCxLQUFLLENBQUMySCxFQUFFLEdBQ2xFMUMsR0FBRyxDQUFDLE9BQU8wQyxFQUFFRSxXQUFXLEdBQUcsSUFBSUQ7WUFDbkN4SSxHQUFHLENBQUN1SSxFQUFFLEdBQUcsT0FBTzlILFVBQVUsWUFBWTJHLEtBQUtzQixRQUFRLENBQUNILEtBQ2hELENBQUM5SCxRQUNEQTtZQUNKLE9BQU9UO1FBQ1QsR0FDQSxDQUFDLEVBQ0Y7UUFDRDRELFlBQWtCO1lBQ2hCK0Usa0JBQWtCO1lBQ2xCLEdBQUc1QyxFQUFFbkMsVUFBVTtZQUNmLEdBQUc1RyxPQUFPNkMsT0FBTyxDQUFDZSxPQUFPYixNQUFNLENBQUMsQ0FBQ0MsS0FBSyxDQUFDdUksR0FBR0ssRUFBRSxHQUFNTCxDQUFBQSxLQUFLbEIsWUFBYXJILENBQUFBLEdBQUcsQ0FBQ3VJLEVBQUUsR0FBR0ssQ0FBQUEsR0FBSTVJLEdBQUUsR0FBSSxDQUFDLEVBQUU7UUFDNUY7UUFDQUYsT0FBa0JpRyxFQUFFakcsS0FBSyxJQUFJLENBQUM7UUFDOUI2SCxzQkFBc0JrQixJQUFJOUMsR0FBR0MsS0FBS0g7UUFDbENpRCxVQUFrQi9DLEVBQUUrQyxRQUFRO1FBQzVCdEcsVUFBa0J1RCxFQUFFdkQsUUFBUTtRQUM1QnhELFNBQWtCK0csRUFBRS9HLE9BQU87UUFDM0IrSixhQUFrQmhELEVBQUVnRCxXQUFXO1FBQy9CQyxRQUFrQmpELEVBQUVpRCxNQUFNO1FBQzFCL0gsV0FBa0JnSSxlQUFlbEQsRUFBRTlFLFNBQVMsSUFBSTtZQUFFaUksV0FBV0E7UUFBVTtRQUN2RTlKLFlBQWtCLENBQUM7UUFDbkJ3RixRQUFrQjtZQUFFdUUsU0FBUztZQUFHdEUsY0FBYyxDQUFDO1FBQUU7UUFDakQsR0FBR25KLHlEQUFjQSxDQUFDcUssRUFBRWpHLEtBQUssQ0FBQztJQUM1QjtBQUNGO0FBRUEsU0FBUytJLElBQUk5QyxDQUFDLEVBQUVDLEdBQUcsRUFBRUgsR0FBRztJQUN0QixNQUFNdEksSUFBSXdJLEVBQUU0QixvQkFBb0IsSUFBSTNCLElBQUlHLFlBQVksQ0FBQ2lELEdBQUcsQ0FBQywyQkFBMkJ2RCxJQUFJd0Qsb0JBQW9CO0lBQzVHLElBQUksQ0FBQzlMLEtBQUs7UUFBQztRQUFjO1FBQWE7UUFBVztRQUFXO0tBQWlCLENBQUNtTCxRQUFRLENBQUNuTCxJQUNyRixPQUFPQTtJQUVULE1BQU0sSUFBSStMLE1BQU0sMEJBQTBCL0wsSUFBSTtBQUNoRDtBQUVBLFNBQVNpSyxRQUFRMkIsT0FBTztJQUN0QixPQUFPLENBQUMsTUFBTTFELEtBQUs4RCxNQUFNLEtBQUssS0FBSzlELEtBQUsrRCxHQUFHLENBQUMsS0FBS0wsVUFBVSxLQUFLO0FBQ2xFO0FBRUEsU0FBU3BIO0lBQ1AsT0FBTyxLQUFNLE1BQUswRCxLQUFLOEQsTUFBTSxLQUFLLEVBQUM7QUFDckM7QUFFQSxTQUFTTixlQUFlMUwsQ0FBQztJQUN2QixPQUFPO1FBQ0wyTCxXQUFXM0wsRUFBRTJMLFNBQVM7UUFDdEJoSSxRQUFRO1lBQ043RCxNQUFNLE9BQU9FLEVBQUUyRCxNQUFNLEtBQUssYUFBYTNELEVBQUUyRCxNQUFNLEdBQUczRCxFQUFFMkQsTUFBTSxJQUFJM0QsRUFBRTJELE1BQU0sQ0FBQzdELElBQUk7WUFDM0VELElBQUlHLEVBQUUyRCxNQUFNLElBQUkzRCxFQUFFMkQsTUFBTSxDQUFDOUQsRUFBRTtRQUM3QjtRQUNBcUQsT0FBTztZQUNMcEQsTUFBTSxPQUFPRSxFQUFFa0QsS0FBSyxLQUFLLGFBQWFsRCxFQUFFa0QsS0FBSyxHQUFHbEQsRUFBRWtELEtBQUssSUFBSWxELEVBQUVrRCxLQUFLLENBQUNwRCxJQUFJO1lBQ3ZFRCxJQUFJRyxFQUFFa0QsS0FBSyxJQUFJbEQsRUFBRWtELEtBQUssQ0FBQ3JELEVBQUU7UUFDM0I7UUFDQXFNLEtBQUs7WUFDSHBNLE1BQU0sT0FBT0UsRUFBRWtNLEdBQUcsS0FBSyxhQUFhbE0sRUFBRWtNLEdBQUcsR0FBR2xNLEVBQUVrTSxHQUFHLElBQUlsTSxFQUFFa00sR0FBRyxDQUFDcE0sSUFBSTtZQUMvREQsSUFBSUcsRUFBRWtNLEdBQUcsSUFBSWxNLEVBQUVrTSxHQUFHLENBQUNyTSxFQUFFO1FBQ3ZCO0lBQ0Y7QUFDRjtBQUVBLFNBQVM4SSxTQUFTRixHQUFHO0lBQ25CLElBQUksQ0FBQ0EsT0FBTyxPQUFPQSxRQUFRLFVBQ3pCLE9BQU87UUFBRUEsS0FBSztZQUFFRyxjQUFjLElBQUl1RDtRQUFNO0lBQUU7SUFFNUMsSUFBSXRELE9BQU9KO0lBQ1hJLE9BQU9BLEtBQUs4QixLQUFLLENBQUM5QixLQUFLMEIsT0FBTyxDQUFDLFNBQVMsR0FBR0YsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0lBQzNEeEIsT0FBT3VELG1CQUFtQnZELEtBQUs4QixLQUFLLENBQUM5QixLQUFLMEIsT0FBTyxDQUFDLE9BQU87SUFFekQsTUFBTThCLFNBQVMsSUFBSUMsSUFBSTdELElBQUlqRCxPQUFPLENBQUNxRCxNQUFNQSxLQUFLd0IsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO0lBRTNELE9BQU87UUFDTDVCLEtBQUs7WUFDSFUsVUFBVWlELG1CQUFtQkMsT0FBT2xELFFBQVE7WUFDNUMyQixVQUFVc0IsbUJBQW1CQyxPQUFPdkIsUUFBUTtZQUM1Q2pDLE1BQU13RCxPQUFPeEQsSUFBSTtZQUNqQkMsVUFBVXVELE9BQU92RCxRQUFRO1lBQ3pCRSxNQUFNcUQsT0FBT3JELElBQUk7WUFDakIwQixVQUFVMkIsT0FBTzNCLFFBQVE7WUFDekI5QixjQUFjeUQsT0FBT3pELFlBQVk7UUFDbkM7UUFDQUYsV0FBV0csS0FBSzBCLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSzFCO0lBQ3ZDO0FBQ0Y7QUFFQSxTQUFTUztJQUNQLElBQUk7UUFDRixPQUFPckwsd0NBQVcsR0FBR2tMLFFBQVEsQ0FBQyxzQkFBc0I7O0lBQ3RELEVBQUUsT0FBTzFDLEdBQUc7UUFDVixPQUFPOEIsUUFBUUQsR0FBRyxDQUFDa0UsUUFBUSxJQUFJakUsUUFBUUQsR0FBRyxDQUFDbUUsSUFBSSxJQUFJbEUsUUFBUUQsR0FBRyxDQUFDb0UsT0FBTyxDQUFFLHNCQUFzQjs7SUFDaEc7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3BlcmlvZC10cmFja2VyLy4vbm9kZV9tb2R1bGVzL3Bvc3RncmVzL3NyYy9pbmRleC5qcz85NmVjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBvcyBmcm9tICdvcydcbmltcG9ydCBmcyBmcm9tICdmcydcblxuaW1wb3J0IHtcbiAgbWVyZ2VVc2VyVHlwZXMsXG4gIGluZmVyVHlwZSxcbiAgUGFyYW1ldGVyLFxuICBJZGVudGlmaWVyLFxuICBCdWlsZGVyLFxuICB0b1Bhc2NhbCxcbiAgcGFzY2FsLFxuICB0b0NhbWVsLFxuICBjYW1lbCxcbiAgdG9LZWJhYixcbiAga2ViYWIsXG4gIGZyb21QYXNjYWwsXG4gIGZyb21DYW1lbCxcbiAgZnJvbUtlYmFiXG59IGZyb20gJy4vdHlwZXMuanMnXG5cbmltcG9ydCBDb25uZWN0aW9uIGZyb20gJy4vY29ubmVjdGlvbi5qcydcbmltcG9ydCB7IFF1ZXJ5LCBDTE9TRSB9IGZyb20gJy4vcXVlcnkuanMnXG5pbXBvcnQgUXVldWUgZnJvbSAnLi9xdWV1ZS5qcydcbmltcG9ydCB7IEVycm9ycywgUG9zdGdyZXNFcnJvciB9IGZyb20gJy4vZXJyb3JzLmpzJ1xuaW1wb3J0IFN1YnNjcmliZSBmcm9tICcuL3N1YnNjcmliZS5qcydcbmltcG9ydCBsYXJnZU9iamVjdCBmcm9tICcuL2xhcmdlLmpzJ1xuXG5PYmplY3QuYXNzaWduKFBvc3RncmVzLCB7XG4gIFBvc3RncmVzRXJyb3IsXG4gIHRvUGFzY2FsLFxuICBwYXNjYWwsXG4gIHRvQ2FtZWwsXG4gIGNhbWVsLFxuICB0b0tlYmFiLFxuICBrZWJhYixcbiAgZnJvbVBhc2NhbCxcbiAgZnJvbUNhbWVsLFxuICBmcm9tS2ViYWIsXG4gIEJpZ0ludDoge1xuICAgIHRvOiAyMCxcbiAgICBmcm9tOiBbMjBdLFxuICAgIHBhcnNlOiB4ID0+IEJpZ0ludCh4KSwgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIHNlcmlhbGl6ZTogeCA9PiB4LnRvU3RyaW5nKClcbiAgfVxufSlcblxuZXhwb3J0IGRlZmF1bHQgUG9zdGdyZXNcblxuZnVuY3Rpb24gUG9zdGdyZXMoYSwgYikge1xuICBjb25zdCBvcHRpb25zID0gcGFyc2VPcHRpb25zKGEsIGIpXG4gICAgICAsIHN1YnNjcmliZSA9IG9wdGlvbnMubm9fc3Vic2NyaWJlIHx8IFN1YnNjcmliZShQb3N0Z3JlcywgeyAuLi5vcHRpb25zIH0pXG5cbiAgbGV0IGVuZGluZyA9IGZhbHNlXG5cbiAgY29uc3QgcXVlcmllcyA9IFF1ZXVlKClcbiAgICAgICwgY29ubmVjdGluZyA9IFF1ZXVlKClcbiAgICAgICwgcmVzZXJ2ZWQgPSBRdWV1ZSgpXG4gICAgICAsIGNsb3NlZCA9IFF1ZXVlKClcbiAgICAgICwgZW5kZWQgPSBRdWV1ZSgpXG4gICAgICAsIG9wZW4gPSBRdWV1ZSgpXG4gICAgICAsIGJ1c3kgPSBRdWV1ZSgpXG4gICAgICAsIGZ1bGwgPSBRdWV1ZSgpXG4gICAgICAsIHF1ZXVlcyA9IHsgY29ubmVjdGluZywgcmVzZXJ2ZWQsIGNsb3NlZCwgZW5kZWQsIG9wZW4sIGJ1c3ksIGZ1bGwgfVxuXG4gIGNvbnN0IGNvbm5lY3Rpb25zID0gWy4uLkFycmF5KG9wdGlvbnMubWF4KV0ubWFwKCgpID0+IENvbm5lY3Rpb24ob3B0aW9ucywgcXVldWVzLCB7IG9ub3Blbiwgb25lbmQsIG9uY2xvc2UgfSkpXG5cbiAgY29uc3Qgc3FsID0gU3FsKGhhbmRsZXIpXG5cbiAgT2JqZWN0LmFzc2lnbihzcWwsIHtcbiAgICBnZXQgcGFyYW1ldGVycygpIHsgcmV0dXJuIG9wdGlvbnMucGFyYW1ldGVycyB9LFxuICAgIGxhcmdlT2JqZWN0OiBsYXJnZU9iamVjdC5iaW5kKG51bGwsIHNxbCksXG4gICAgc3Vic2NyaWJlLFxuICAgIENMT1NFLFxuICAgIEVORDogQ0xPU0UsXG4gICAgUG9zdGdyZXNFcnJvcixcbiAgICBvcHRpb25zLFxuICAgIHJlc2VydmUsXG4gICAgbGlzdGVuLFxuICAgIGJlZ2luLFxuICAgIGNsb3NlLFxuICAgIGVuZFxuICB9KVxuXG4gIHJldHVybiBzcWxcblxuICBmdW5jdGlvbiBTcWwoaGFuZGxlcikge1xuICAgIGhhbmRsZXIuZGVidWcgPSBvcHRpb25zLmRlYnVnXG5cbiAgICBPYmplY3QuZW50cmllcyhvcHRpb25zLnR5cGVzKS5yZWR1Y2UoKGFjYywgW25hbWUsIHR5cGVdKSA9PiB7XG4gICAgICBhY2NbbmFtZV0gPSAoeCkgPT4gbmV3IFBhcmFtZXRlcih4LCB0eXBlLnRvKVxuICAgICAgcmV0dXJuIGFjY1xuICAgIH0sIHR5cGVkKVxuXG4gICAgT2JqZWN0LmFzc2lnbihzcWwsIHtcbiAgICAgIHR5cGVzOiB0eXBlZCxcbiAgICAgIHR5cGVkLFxuICAgICAgdW5zYWZlLFxuICAgICAgbm90aWZ5LFxuICAgICAgYXJyYXksXG4gICAgICBqc29uLFxuICAgICAgZmlsZVxuICAgIH0pXG5cbiAgICByZXR1cm4gc3FsXG5cbiAgICBmdW5jdGlvbiB0eXBlZCh2YWx1ZSwgdHlwZSkge1xuICAgICAgcmV0dXJuIG5ldyBQYXJhbWV0ZXIodmFsdWUsIHR5cGUpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3FsKHN0cmluZ3MsIC4uLmFyZ3MpIHtcbiAgICAgIGNvbnN0IHF1ZXJ5ID0gc3RyaW5ncyAmJiBBcnJheS5pc0FycmF5KHN0cmluZ3MucmF3KVxuICAgICAgICA/IG5ldyBRdWVyeShzdHJpbmdzLCBhcmdzLCBoYW5kbGVyLCBjYW5jZWwpXG4gICAgICAgIDogdHlwZW9mIHN0cmluZ3MgPT09ICdzdHJpbmcnICYmICFhcmdzLmxlbmd0aFxuICAgICAgICAgID8gbmV3IElkZW50aWZpZXIob3B0aW9ucy50cmFuc2Zvcm0uY29sdW1uLnRvID8gb3B0aW9ucy50cmFuc2Zvcm0uY29sdW1uLnRvKHN0cmluZ3MpIDogc3RyaW5ncylcbiAgICAgICAgICA6IG5ldyBCdWlsZGVyKHN0cmluZ3MsIGFyZ3MpXG4gICAgICByZXR1cm4gcXVlcnlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1bnNhZmUoc3RyaW5nLCBhcmdzID0gW10sIG9wdGlvbnMgPSB7fSkge1xuICAgICAgYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiAhQXJyYXkuaXNBcnJheShhcmdzKSAmJiAob3B0aW9ucyA9IGFyZ3MsIGFyZ3MgPSBbXSlcbiAgICAgIGNvbnN0IHF1ZXJ5ID0gbmV3IFF1ZXJ5KFtzdHJpbmddLCBhcmdzLCBoYW5kbGVyLCBjYW5jZWwsIHtcbiAgICAgICAgcHJlcGFyZTogZmFsc2UsXG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIHNpbXBsZTogJ3NpbXBsZScgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc2ltcGxlIDogYXJncy5sZW5ndGggPT09IDBcbiAgICAgIH0pXG4gICAgICByZXR1cm4gcXVlcnlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaWxlKHBhdGgsIGFyZ3MgPSBbXSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICBhcmd1bWVudHMubGVuZ3RoID09PSAyICYmICFBcnJheS5pc0FycmF5KGFyZ3MpICYmIChvcHRpb25zID0gYXJncywgYXJncyA9IFtdKVxuICAgICAgY29uc3QgcXVlcnkgPSBuZXcgUXVlcnkoW10sIGFyZ3MsIChxdWVyeSkgPT4ge1xuICAgICAgICBmcy5yZWFkRmlsZShwYXRoLCAndXRmOCcsIChlcnIsIHN0cmluZykgPT4ge1xuICAgICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgICByZXR1cm4gcXVlcnkucmVqZWN0KGVycilcblxuICAgICAgICAgIHF1ZXJ5LnN0cmluZ3MgPSBbc3RyaW5nXVxuICAgICAgICAgIGhhbmRsZXIocXVlcnkpXG4gICAgICAgIH0pXG4gICAgICB9LCBjYW5jZWwsIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgc2ltcGxlOiAnc2ltcGxlJyBpbiBvcHRpb25zID8gb3B0aW9ucy5zaW1wbGUgOiBhcmdzLmxlbmd0aCA9PT0gMFxuICAgICAgfSlcbiAgICAgIHJldHVybiBxdWVyeVxuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIGxpc3RlbihuYW1lLCBmbiwgb25saXN0ZW4pIHtcbiAgICBjb25zdCBsaXN0ZW5lciA9IHsgZm4sIG9ubGlzdGVuIH1cblxuICAgIGNvbnN0IHNxbCA9IGxpc3Rlbi5zcWwgfHwgKGxpc3Rlbi5zcWwgPSBQb3N0Z3Jlcyh7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgbWF4OiAxLFxuICAgICAgaWRsZV90aW1lb3V0OiBudWxsLFxuICAgICAgbWF4X2xpZmV0aW1lOiBudWxsLFxuICAgICAgZmV0Y2hfdHlwZXM6IGZhbHNlLFxuICAgICAgb25jbG9zZSgpIHtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobGlzdGVuLmNoYW5uZWxzKS5mb3JFYWNoKChbbmFtZSwgeyBsaXN0ZW5lcnMgfV0pID0+IHtcbiAgICAgICAgICBkZWxldGUgbGlzdGVuLmNoYW5uZWxzW25hbWVdXG4gICAgICAgICAgUHJvbWlzZS5hbGwobGlzdGVuZXJzLm1hcChsID0+IGxpc3RlbihuYW1lLCBsLmZuLCBsLm9ubGlzdGVuKS5jYXRjaCgoKSA9PiB7IC8qIG5vb3AgKi8gfSkpKVxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICAgIG9ubm90aWZ5KGMsIHgpIHtcbiAgICAgICAgYyBpbiBsaXN0ZW4uY2hhbm5lbHMgJiYgbGlzdGVuLmNoYW5uZWxzW2NdLmxpc3RlbmVycy5mb3JFYWNoKGwgPT4gbC5mbih4KSlcbiAgICAgIH1cbiAgICB9KSlcblxuICAgIGNvbnN0IGNoYW5uZWxzID0gbGlzdGVuLmNoYW5uZWxzIHx8IChsaXN0ZW4uY2hhbm5lbHMgPSB7fSlcbiAgICAgICAgLCBleGlzdHMgPSBuYW1lIGluIGNoYW5uZWxzXG5cbiAgICBpZiAoZXhpc3RzKSB7XG4gICAgICBjaGFubmVsc1tuYW1lXS5saXN0ZW5lcnMucHVzaChsaXN0ZW5lcilcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNoYW5uZWxzW25hbWVdLnJlc3VsdFxuICAgICAgbGlzdGVuZXIub25saXN0ZW4gJiYgbGlzdGVuZXIub25saXN0ZW4oKVxuICAgICAgcmV0dXJuIHsgc3RhdGU6IHJlc3VsdC5zdGF0ZSwgdW5saXN0ZW4gfVxuICAgIH1cblxuICAgIGNoYW5uZWxzW25hbWVdID0geyByZXN1bHQ6IHNxbGBsaXN0ZW4gJHtcbiAgICAgIHNxbC51bnNhZmUoJ1wiJyArIG5hbWUucmVwbGFjZSgvXCIvZywgJ1wiXCInKSArICdcIicpXG4gICAgfWAsIGxpc3RlbmVyczogW2xpc3RlbmVyXSB9XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgY2hhbm5lbHNbbmFtZV0ucmVzdWx0XG4gICAgbGlzdGVuZXIub25saXN0ZW4gJiYgbGlzdGVuZXIub25saXN0ZW4oKVxuICAgIHJldHVybiB7IHN0YXRlOiByZXN1bHQuc3RhdGUsIHVubGlzdGVuIH1cblxuICAgIGFzeW5jIGZ1bmN0aW9uIHVubGlzdGVuKCkge1xuICAgICAgaWYgKG5hbWUgaW4gY2hhbm5lbHMgPT09IGZhbHNlKVxuICAgICAgICByZXR1cm5cblxuICAgICAgY2hhbm5lbHNbbmFtZV0ubGlzdGVuZXJzID0gY2hhbm5lbHNbbmFtZV0ubGlzdGVuZXJzLmZpbHRlcih4ID0+IHggIT09IGxpc3RlbmVyKVxuICAgICAgaWYgKGNoYW5uZWxzW25hbWVdLmxpc3RlbmVycy5sZW5ndGgpXG4gICAgICAgIHJldHVyblxuXG4gICAgICBkZWxldGUgY2hhbm5lbHNbbmFtZV1cbiAgICAgIHJldHVybiBzcWxgdW5saXN0ZW4gJHtcbiAgICAgICAgc3FsLnVuc2FmZSgnXCInICsgbmFtZS5yZXBsYWNlKC9cIi9nLCAnXCJcIicpICsgJ1wiJylcbiAgICAgIH1gXG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gbm90aWZ5KGNoYW5uZWwsIHBheWxvYWQpIHtcbiAgICByZXR1cm4gYXdhaXQgc3FsYHNlbGVjdCBwZ19ub3RpZnkoJHsgY2hhbm5lbCB9LCAkeyAnJyArIHBheWxvYWQgfSlgXG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiByZXNlcnZlKCkge1xuICAgIGNvbnN0IHF1ZXVlID0gUXVldWUoKVxuICAgIGNvbnN0IGMgPSBvcGVuLmxlbmd0aFxuICAgICAgPyBvcGVuLnNoaWZ0KClcbiAgICAgIDogYXdhaXQgbmV3IFByb21pc2UociA9PiB7XG4gICAgICAgIHF1ZXJpZXMucHVzaCh7IHJlc2VydmU6IHIgfSlcbiAgICAgICAgY2xvc2VkLmxlbmd0aCAmJiBjb25uZWN0KGNsb3NlZC5zaGlmdCgpKVxuICAgICAgfSlcblxuICAgIG1vdmUoYywgcmVzZXJ2ZWQpXG4gICAgYy5yZXNlcnZlZCA9ICgpID0+IHF1ZXVlLmxlbmd0aFxuICAgICAgPyBjLmV4ZWN1dGUocXVldWUuc2hpZnQoKSlcbiAgICAgIDogbW92ZShjLCByZXNlcnZlZClcbiAgICBjLnJlc2VydmVkLnJlbGVhc2UgPSB0cnVlXG5cbiAgICBjb25zdCBzcWwgPSBTcWwoaGFuZGxlcilcbiAgICBzcWwucmVsZWFzZSA9ICgpID0+IHtcbiAgICAgIGMucmVzZXJ2ZWQgPSBudWxsXG4gICAgICBvbm9wZW4oYylcbiAgICB9XG5cbiAgICByZXR1cm4gc3FsXG5cbiAgICBmdW5jdGlvbiBoYW5kbGVyKHEpIHtcbiAgICAgIGMucXVldWUgPT09IGZ1bGxcbiAgICAgICAgPyBxdWV1ZS5wdXNoKHEpXG4gICAgICAgIDogYy5leGVjdXRlKHEpIHx8IG1vdmUoYywgZnVsbClcbiAgICB9XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBiZWdpbihvcHRpb25zLCBmbikge1xuICAgICFmbiAmJiAoZm4gPSBvcHRpb25zLCBvcHRpb25zID0gJycpXG4gICAgY29uc3QgcXVlcmllcyA9IFF1ZXVlKClcbiAgICBsZXQgc2F2ZXBvaW50cyA9IDBcbiAgICAgICwgY29ubmVjdGlvblxuICAgICAgLCBwcmVwYXJlID0gbnVsbFxuXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHNxbC51bnNhZmUoJ2JlZ2luICcgKyBvcHRpb25zLnJlcGxhY2UoL1teYS16IF0vaWcsICcnKSwgW10sIHsgb25leGVjdXRlIH0pLmV4ZWN1dGUoKVxuICAgICAgcmV0dXJuIGF3YWl0IFByb21pc2UucmFjZShbXG4gICAgICAgIHNjb3BlKGNvbm5lY3Rpb24sIGZuKSxcbiAgICAgICAgbmV3IFByb21pc2UoKF8sIHJlamVjdCkgPT4gY29ubmVjdGlvbi5vbmNsb3NlID0gcmVqZWN0KVxuICAgICAgXSlcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3JcbiAgICB9XG5cbiAgICBhc3luYyBmdW5jdGlvbiBzY29wZShjLCBmbiwgbmFtZSkge1xuICAgICAgY29uc3Qgc3FsID0gU3FsKGhhbmRsZXIpXG4gICAgICBzcWwuc2F2ZXBvaW50ID0gc2F2ZXBvaW50XG4gICAgICBzcWwucHJlcGFyZSA9IHggPT4gcHJlcGFyZSA9IHgucmVwbGFjZSgvW15hLXowLTkkLV8uIF0vZ2kpXG4gICAgICBsZXQgdW5jYXVnaHRFcnJvclxuICAgICAgICAsIHJlc3VsdFxuXG4gICAgICBuYW1lICYmIGF3YWl0IHNxbGBzYXZlcG9pbnQgJHsgc3FsKG5hbWUpIH1gXG4gICAgICB0cnkge1xuICAgICAgICByZXN1bHQgPSBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgY29uc3QgeCA9IGZuKHNxbClcbiAgICAgICAgICBQcm9taXNlLnJlc29sdmUoQXJyYXkuaXNBcnJheSh4KSA/IFByb21pc2UuYWxsKHgpIDogeCkudGhlbihyZXNvbHZlLCByZWplY3QpXG4gICAgICAgIH0pXG5cbiAgICAgICAgaWYgKHVuY2F1Z2h0RXJyb3IpXG4gICAgICAgICAgdGhyb3cgdW5jYXVnaHRFcnJvclxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBhd2FpdCAobmFtZVxuICAgICAgICAgID8gc3FsYHJvbGxiYWNrIHRvICR7IHNxbChuYW1lKSB9YFxuICAgICAgICAgIDogc3FsYHJvbGxiYWNrYFxuICAgICAgICApXG4gICAgICAgIHRocm93IGUgaW5zdGFuY2VvZiBQb3N0Z3Jlc0Vycm9yICYmIGUuY29kZSA9PT0gJzI1UDAyJyAmJiB1bmNhdWdodEVycm9yIHx8IGVcbiAgICAgIH1cblxuICAgICAgaWYgKCFuYW1lKSB7XG4gICAgICAgIHByZXBhcmVcbiAgICAgICAgICA/IGF3YWl0IHNxbGBwcmVwYXJlIHRyYW5zYWN0aW9uICckeyBzcWwudW5zYWZlKHByZXBhcmUpIH0nYFxuICAgICAgICAgIDogYXdhaXQgc3FsYGNvbW1pdGBcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdFxuXG4gICAgICBmdW5jdGlvbiBzYXZlcG9pbnQobmFtZSwgZm4pIHtcbiAgICAgICAgaWYgKG5hbWUgJiYgQXJyYXkuaXNBcnJheShuYW1lLnJhdykpXG4gICAgICAgICAgcmV0dXJuIHNhdmVwb2ludChzcWwgPT4gc3FsLmFwcGx5KHNxbCwgYXJndW1lbnRzKSlcblxuICAgICAgICBhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIChmbiA9IG5hbWUsIG5hbWUgPSBudWxsKVxuICAgICAgICByZXR1cm4gc2NvcGUoYywgZm4sICdzJyArIHNhdmVwb2ludHMrKyArIChuYW1lID8gJ18nICsgbmFtZSA6ICcnKSlcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gaGFuZGxlcihxKSB7XG4gICAgICAgIHEuY2F0Y2goZSA9PiB1bmNhdWdodEVycm9yIHx8ICh1bmNhdWdodEVycm9yID0gZSkpXG4gICAgICAgIGMucXVldWUgPT09IGZ1bGxcbiAgICAgICAgICA/IHF1ZXJpZXMucHVzaChxKVxuICAgICAgICAgIDogYy5leGVjdXRlKHEpIHx8IG1vdmUoYywgZnVsbClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbmV4ZWN1dGUoYykge1xuICAgICAgY29ubmVjdGlvbiA9IGNcbiAgICAgIG1vdmUoYywgcmVzZXJ2ZWQpXG4gICAgICBjLnJlc2VydmVkID0gKCkgPT4gcXVlcmllcy5sZW5ndGhcbiAgICAgICAgPyBjLmV4ZWN1dGUocXVlcmllcy5zaGlmdCgpKVxuICAgICAgICA6IG1vdmUoYywgcmVzZXJ2ZWQpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbW92ZShjLCBxdWV1ZSkge1xuICAgIGMucXVldWUucmVtb3ZlKGMpXG4gICAgcXVldWUucHVzaChjKVxuICAgIGMucXVldWUgPSBxdWV1ZVxuICAgIHF1ZXVlID09PSBvcGVuXG4gICAgICA/IGMuaWRsZVRpbWVyLnN0YXJ0KClcbiAgICAgIDogYy5pZGxlVGltZXIuY2FuY2VsKClcbiAgICByZXR1cm4gY1xuICB9XG5cbiAgZnVuY3Rpb24ganNvbih4KSB7XG4gICAgcmV0dXJuIG5ldyBQYXJhbWV0ZXIoeCwgMzgwMilcbiAgfVxuXG4gIGZ1bmN0aW9uIGFycmF5KHgsIHR5cGUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoeCkpXG4gICAgICByZXR1cm4gYXJyYXkoQXJyYXkuZnJvbShhcmd1bWVudHMpKVxuXG4gICAgcmV0dXJuIG5ldyBQYXJhbWV0ZXIoeCwgdHlwZSB8fCAoeC5sZW5ndGggPyBpbmZlclR5cGUoeCkgfHwgMjUgOiAwKSwgb3B0aW9ucy5zaGFyZWQudHlwZUFycmF5TWFwKVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlcihxdWVyeSkge1xuICAgIGlmIChlbmRpbmcpXG4gICAgICByZXR1cm4gcXVlcnkucmVqZWN0KEVycm9ycy5jb25uZWN0aW9uKCdDT05ORUNUSU9OX0VOREVEJywgb3B0aW9ucywgb3B0aW9ucykpXG5cbiAgICBpZiAob3Blbi5sZW5ndGgpXG4gICAgICByZXR1cm4gZ28ob3Blbi5zaGlmdCgpLCBxdWVyeSlcblxuICAgIGlmIChjbG9zZWQubGVuZ3RoKVxuICAgICAgcmV0dXJuIGNvbm5lY3QoY2xvc2VkLnNoaWZ0KCksIHF1ZXJ5KVxuXG4gICAgYnVzeS5sZW5ndGhcbiAgICAgID8gZ28oYnVzeS5zaGlmdCgpLCBxdWVyeSlcbiAgICAgIDogcXVlcmllcy5wdXNoKHF1ZXJ5KVxuICB9XG5cbiAgZnVuY3Rpb24gZ28oYywgcXVlcnkpIHtcbiAgICByZXR1cm4gYy5leGVjdXRlKHF1ZXJ5KVxuICAgICAgPyBtb3ZlKGMsIGJ1c3kpXG4gICAgICA6IG1vdmUoYywgZnVsbClcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbChxdWVyeSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBxdWVyeS5zdGF0ZVxuICAgICAgICA/IHF1ZXJ5LmFjdGl2ZVxuICAgICAgICAgID8gQ29ubmVjdGlvbihvcHRpb25zKS5jYW5jZWwocXVlcnkuc3RhdGUsIHJlc29sdmUsIHJlamVjdClcbiAgICAgICAgICA6IHF1ZXJ5LmNhbmNlbGxlZCA9IHsgcmVzb2x2ZSwgcmVqZWN0IH1cbiAgICAgICAgOiAoXG4gICAgICAgICAgcXVlcmllcy5yZW1vdmUocXVlcnkpLFxuICAgICAgICAgIHF1ZXJ5LmNhbmNlbGxlZCA9IHRydWUsXG4gICAgICAgICAgcXVlcnkucmVqZWN0KEVycm9ycy5nZW5lcmljKCc1NzAxNCcsICdjYW5jZWxpbmcgc3RhdGVtZW50IGR1ZSB0byB1c2VyIHJlcXVlc3QnKSksXG4gICAgICAgICAgcmVzb2x2ZSgpXG4gICAgICAgIClcbiAgICB9KVxuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gZW5kKHsgdGltZW91dCA9IG51bGwgfSA9IHt9KSB7XG4gICAgaWYgKGVuZGluZylcbiAgICAgIHJldHVybiBlbmRpbmdcblxuICAgIGF3YWl0IDFcbiAgICBsZXQgdGltZXJcbiAgICByZXR1cm4gZW5kaW5nID0gUHJvbWlzZS5yYWNlKFtcbiAgICAgIG5ldyBQcm9taXNlKHIgPT4gdGltZW91dCAhPT0gbnVsbCAmJiAodGltZXIgPSBzZXRUaW1lb3V0KGRlc3Ryb3ksIHRpbWVvdXQgKiAxMDAwLCByKSkpLFxuICAgICAgUHJvbWlzZS5hbGwoY29ubmVjdGlvbnMubWFwKGMgPT4gYy5lbmQoKSkuY29uY2F0KFxuICAgICAgICBsaXN0ZW4uc3FsID8gbGlzdGVuLnNxbC5lbmQoeyB0aW1lb3V0OiAwIH0pIDogW10sXG4gICAgICAgIHN1YnNjcmliZS5zcWwgPyBzdWJzY3JpYmUuc3FsLmVuZCh7IHRpbWVvdXQ6IDAgfSkgOiBbXVxuICAgICAgKSlcbiAgICBdKS50aGVuKCgpID0+IGNsZWFyVGltZW91dCh0aW1lcikpXG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBjbG9zZSgpIHtcbiAgICBhd2FpdCBQcm9taXNlLmFsbChjb25uZWN0aW9ucy5tYXAoYyA9PiBjLmVuZCgpKSlcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIGRlc3Ryb3kocmVzb2x2ZSkge1xuICAgIGF3YWl0IFByb21pc2UuYWxsKGNvbm5lY3Rpb25zLm1hcChjID0+IGMudGVybWluYXRlKCkpKVxuICAgIHdoaWxlIChxdWVyaWVzLmxlbmd0aClcbiAgICAgIHF1ZXJpZXMuc2hpZnQoKS5yZWplY3QoRXJyb3JzLmNvbm5lY3Rpb24oJ0NPTk5FQ1RJT05fREVTVFJPWUVEJywgb3B0aW9ucykpXG4gICAgcmVzb2x2ZSgpXG4gIH1cblxuICBmdW5jdGlvbiBjb25uZWN0KGMsIHF1ZXJ5KSB7XG4gICAgbW92ZShjLCBjb25uZWN0aW5nKVxuICAgIGMuY29ubmVjdChxdWVyeSlcbiAgICByZXR1cm4gY1xuICB9XG5cbiAgZnVuY3Rpb24gb25lbmQoYykge1xuICAgIG1vdmUoYywgZW5kZWQpXG4gIH1cblxuICBmdW5jdGlvbiBvbm9wZW4oYykge1xuICAgIGlmIChxdWVyaWVzLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiBtb3ZlKGMsIG9wZW4pXG5cbiAgICBsZXQgbWF4ID0gTWF0aC5jZWlsKHF1ZXJpZXMubGVuZ3RoIC8gKGNvbm5lY3RpbmcubGVuZ3RoICsgMSkpXG4gICAgICAsIHJlYWR5ID0gdHJ1ZVxuXG4gICAgd2hpbGUgKHJlYWR5ICYmIHF1ZXJpZXMubGVuZ3RoICYmIG1heC0tID4gMCkge1xuICAgICAgY29uc3QgcXVlcnkgPSBxdWVyaWVzLnNoaWZ0KClcbiAgICAgIGlmIChxdWVyeS5yZXNlcnZlKVxuICAgICAgICByZXR1cm4gcXVlcnkucmVzZXJ2ZShjKVxuXG4gICAgICByZWFkeSA9IGMuZXhlY3V0ZShxdWVyeSlcbiAgICB9XG5cbiAgICByZWFkeVxuICAgICAgPyBtb3ZlKGMsIGJ1c3kpXG4gICAgICA6IG1vdmUoYywgZnVsbClcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uY2xvc2UoYywgZSkge1xuICAgIG1vdmUoYywgY2xvc2VkKVxuICAgIGMucmVzZXJ2ZWQgPSBudWxsXG4gICAgYy5vbmNsb3NlICYmIChjLm9uY2xvc2UoZSksIGMub25jbG9zZSA9IG51bGwpXG4gICAgb3B0aW9ucy5vbmNsb3NlICYmIG9wdGlvbnMub25jbG9zZShjLmlkKVxuICAgIHF1ZXJpZXMubGVuZ3RoICYmIGNvbm5lY3QoYywgcXVlcmllcy5zaGlmdCgpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlT3B0aW9ucyhhLCBiKSB7XG4gIGlmIChhICYmIGEuc2hhcmVkKVxuICAgIHJldHVybiBhXG5cbiAgY29uc3QgZW52ID0gcHJvY2Vzcy5lbnYgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgLCBvID0gKCFhIHx8IHR5cGVvZiBhID09PSAnc3RyaW5nJyA/IGIgOiBhKSB8fCB7fVxuICAgICAgLCB7IHVybCwgbXVsdGlob3N0IH0gPSBwYXJzZVVybChhKVxuICAgICAgLCBxdWVyeSA9IFsuLi51cmwuc2VhcmNoUGFyYW1zXS5yZWR1Y2UoKGEsIFtiLCBjXSkgPT4gKGFbYl0gPSBjLCBhKSwge30pXG4gICAgICAsIGhvc3QgPSBvLmhvc3RuYW1lIHx8IG8uaG9zdCB8fCBtdWx0aWhvc3QgfHwgdXJsLmhvc3RuYW1lIHx8IGVudi5QR0hPU1QgfHwgJ2xvY2FsaG9zdCdcbiAgICAgICwgcG9ydCA9IG8ucG9ydCB8fCB1cmwucG9ydCB8fCBlbnYuUEdQT1JUIHx8IDU0MzJcbiAgICAgICwgdXNlciA9IG8udXNlciB8fCBvLnVzZXJuYW1lIHx8IHVybC51c2VybmFtZSB8fCBlbnYuUEdVU0VSTkFNRSB8fCBlbnYuUEdVU0VSIHx8IG9zVXNlcm5hbWUoKVxuXG4gIG8ubm9fcHJlcGFyZSAmJiAoby5wcmVwYXJlID0gZmFsc2UpXG4gIHF1ZXJ5LnNzbG1vZGUgJiYgKHF1ZXJ5LnNzbCA9IHF1ZXJ5LnNzbG1vZGUsIGRlbGV0ZSBxdWVyeS5zc2xtb2RlKVxuICAndGltZW91dCcgaW4gbyAmJiAoY29uc29sZS5sb2coJ1RoZSB0aW1lb3V0IG9wdGlvbiBpcyBkZXByZWNhdGVkLCB1c2UgaWRsZV90aW1lb3V0IGluc3RlYWQnKSwgby5pZGxlX3RpbWVvdXQgPSBvLnRpbWVvdXQpIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgcXVlcnkuc3Nscm9vdGNlcnQgPT09ICdzeXN0ZW0nICYmIChxdWVyeS5zc2wgPSAndmVyaWZ5LWZ1bGwnKVxuXG4gIGNvbnN0IGludHMgPSBbJ2lkbGVfdGltZW91dCcsICdjb25uZWN0X3RpbWVvdXQnLCAnbWF4X2xpZmV0aW1lJywgJ21heF9waXBlbGluZScsICdiYWNrb2ZmJywgJ2tlZXBfYWxpdmUnXVxuICBjb25zdCBkZWZhdWx0cyA9IHtcbiAgICBtYXggICAgICAgICAgICAgOiAxMCxcbiAgICBzc2wgICAgICAgICAgICAgOiBmYWxzZSxcbiAgICBpZGxlX3RpbWVvdXQgICAgOiBudWxsLFxuICAgIGNvbm5lY3RfdGltZW91dCA6IDMwLFxuICAgIG1heF9saWZldGltZSAgICA6IG1heF9saWZldGltZSxcbiAgICBtYXhfcGlwZWxpbmUgICAgOiAxMDAsXG4gICAgYmFja29mZiAgICAgICAgIDogYmFja29mZixcbiAgICBrZWVwX2FsaXZlICAgICAgOiA2MCxcbiAgICBwcmVwYXJlICAgICAgICAgOiB0cnVlLFxuICAgIGRlYnVnICAgICAgICAgICA6IGZhbHNlLFxuICAgIGZldGNoX3R5cGVzICAgICA6IHRydWUsXG4gICAgcHVibGljYXRpb25zICAgIDogJ2FsbHRhYmxlcycsXG4gICAgdGFyZ2V0X3Nlc3Npb25fYXR0cnM6IG51bGxcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaG9zdCAgICAgICAgICAgIDogQXJyYXkuaXNBcnJheShob3N0KSA/IGhvc3QgOiBob3N0LnNwbGl0KCcsJykubWFwKHggPT4geC5zcGxpdCgnOicpWzBdKSxcbiAgICBwb3J0ICAgICAgICAgICAgOiBBcnJheS5pc0FycmF5KHBvcnQpID8gcG9ydCA6IGhvc3Quc3BsaXQoJywnKS5tYXAoeCA9PiBwYXJzZUludCh4LnNwbGl0KCc6JylbMV0gfHwgcG9ydCkpLFxuICAgIHBhdGggICAgICAgICAgICA6IG8ucGF0aCB8fCBob3N0LmluZGV4T2YoJy8nKSA+IC0xICYmIGhvc3QgKyAnLy5zLlBHU1FMLicgKyBwb3J0LFxuICAgIGRhdGFiYXNlICAgICAgICA6IG8uZGF0YWJhc2UgfHwgby5kYiB8fCAodXJsLnBhdGhuYW1lIHx8ICcnKS5zbGljZSgxKSB8fCBlbnYuUEdEQVRBQkFTRSB8fCB1c2VyLFxuICAgIHVzZXIgICAgICAgICAgICA6IHVzZXIsXG4gICAgcGFzcyAgICAgICAgICAgIDogby5wYXNzIHx8IG8ucGFzc3dvcmQgfHwgdXJsLnBhc3N3b3JkIHx8IGVudi5QR1BBU1NXT1JEIHx8ICcnLFxuICAgIC4uLk9iamVjdC5lbnRyaWVzKGRlZmF1bHRzKS5yZWR1Y2UoXG4gICAgICAoYWNjLCBbaywgZF0pID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBrIGluIG8gPyBvW2tdIDogayBpbiBxdWVyeVxuICAgICAgICAgID8gKHF1ZXJ5W2tdID09PSAnZGlzYWJsZScgfHwgcXVlcnlba10gPT09ICdmYWxzZScgPyBmYWxzZSA6IHF1ZXJ5W2tdKVxuICAgICAgICAgIDogZW52WydQRycgKyBrLnRvVXBwZXJDYXNlKCldIHx8IGRcbiAgICAgICAgYWNjW2tdID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiBpbnRzLmluY2x1ZGVzKGspXG4gICAgICAgICAgPyArdmFsdWVcbiAgICAgICAgICA6IHZhbHVlXG4gICAgICAgIHJldHVybiBhY2NcbiAgICAgIH0sXG4gICAgICB7fVxuICAgICksXG4gICAgY29ubmVjdGlvbiAgICAgIDoge1xuICAgICAgYXBwbGljYXRpb25fbmFtZTogJ3Bvc3RncmVzLmpzJyxcbiAgICAgIC4uLm8uY29ubmVjdGlvbixcbiAgICAgIC4uLk9iamVjdC5lbnRyaWVzKHF1ZXJ5KS5yZWR1Y2UoKGFjYywgW2ssIHZdKSA9PiAoayBpbiBkZWZhdWx0cyB8fCAoYWNjW2tdID0gdiksIGFjYyksIHt9KVxuICAgIH0sXG4gICAgdHlwZXMgICAgICAgICAgIDogby50eXBlcyB8fCB7fSxcbiAgICB0YXJnZXRfc2Vzc2lvbl9hdHRyczogdHNhKG8sIHVybCwgZW52KSxcbiAgICBvbm5vdGljZSAgICAgICAgOiBvLm9ubm90aWNlLFxuICAgIG9ubm90aWZ5ICAgICAgICA6IG8ub25ub3RpZnksXG4gICAgb25jbG9zZSAgICAgICAgIDogby5vbmNsb3NlLFxuICAgIG9ucGFyYW1ldGVyICAgICA6IG8ub25wYXJhbWV0ZXIsXG4gICAgc29ja2V0ICAgICAgICAgIDogby5zb2NrZXQsXG4gICAgdHJhbnNmb3JtICAgICAgIDogcGFyc2VUcmFuc2Zvcm0oby50cmFuc2Zvcm0gfHwgeyB1bmRlZmluZWQ6IHVuZGVmaW5lZCB9KSxcbiAgICBwYXJhbWV0ZXJzICAgICAgOiB7fSxcbiAgICBzaGFyZWQgICAgICAgICAgOiB7IHJldHJpZXM6IDAsIHR5cGVBcnJheU1hcDoge30gfSxcbiAgICAuLi5tZXJnZVVzZXJUeXBlcyhvLnR5cGVzKVxuICB9XG59XG5cbmZ1bmN0aW9uIHRzYShvLCB1cmwsIGVudikge1xuICBjb25zdCB4ID0gby50YXJnZXRfc2Vzc2lvbl9hdHRycyB8fCB1cmwuc2VhcmNoUGFyYW1zLmdldCgndGFyZ2V0X3Nlc3Npb25fYXR0cnMnKSB8fCBlbnYuUEdUQVJHRVRTRVNTSU9OQVRUUlNcbiAgaWYgKCF4IHx8IFsncmVhZC13cml0ZScsICdyZWFkLW9ubHknLCAncHJpbWFyeScsICdzdGFuZGJ5JywgJ3ByZWZlci1zdGFuZGJ5J10uaW5jbHVkZXMoeCkpXG4gICAgcmV0dXJuIHhcblxuICB0aHJvdyBuZXcgRXJyb3IoJ3RhcmdldF9zZXNzaW9uX2F0dHJzICcgKyB4ICsgJyBpcyBub3Qgc3VwcG9ydGVkJylcbn1cblxuZnVuY3Rpb24gYmFja29mZihyZXRyaWVzKSB7XG4gIHJldHVybiAoMC41ICsgTWF0aC5yYW5kb20oKSAvIDIpICogTWF0aC5taW4oMyAqKiByZXRyaWVzIC8gMTAwLCAyMClcbn1cblxuZnVuY3Rpb24gbWF4X2xpZmV0aW1lKCkge1xuICByZXR1cm4gNjAgKiAoMzAgKyBNYXRoLnJhbmRvbSgpICogMzApXG59XG5cbmZ1bmN0aW9uIHBhcnNlVHJhbnNmb3JtKHgpIHtcbiAgcmV0dXJuIHtcbiAgICB1bmRlZmluZWQ6IHgudW5kZWZpbmVkLFxuICAgIGNvbHVtbjoge1xuICAgICAgZnJvbTogdHlwZW9mIHguY29sdW1uID09PSAnZnVuY3Rpb24nID8geC5jb2x1bW4gOiB4LmNvbHVtbiAmJiB4LmNvbHVtbi5mcm9tLFxuICAgICAgdG86IHguY29sdW1uICYmIHguY29sdW1uLnRvXG4gICAgfSxcbiAgICB2YWx1ZToge1xuICAgICAgZnJvbTogdHlwZW9mIHgudmFsdWUgPT09ICdmdW5jdGlvbicgPyB4LnZhbHVlIDogeC52YWx1ZSAmJiB4LnZhbHVlLmZyb20sXG4gICAgICB0bzogeC52YWx1ZSAmJiB4LnZhbHVlLnRvXG4gICAgfSxcbiAgICByb3c6IHtcbiAgICAgIGZyb206IHR5cGVvZiB4LnJvdyA9PT0gJ2Z1bmN0aW9uJyA/IHgucm93IDogeC5yb3cgJiYgeC5yb3cuZnJvbSxcbiAgICAgIHRvOiB4LnJvdyAmJiB4LnJvdy50b1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZVVybCh1cmwpIHtcbiAgaWYgKCF1cmwgfHwgdHlwZW9mIHVybCAhPT0gJ3N0cmluZycpXG4gICAgcmV0dXJuIHsgdXJsOiB7IHNlYXJjaFBhcmFtczogbmV3IE1hcCgpIH0gfVxuXG4gIGxldCBob3N0ID0gdXJsXG4gIGhvc3QgPSBob3N0LnNsaWNlKGhvc3QuaW5kZXhPZignOi8vJykgKyAzKS5zcGxpdCgvWz8vXS8pWzBdXG4gIGhvc3QgPSBkZWNvZGVVUklDb21wb25lbnQoaG9zdC5zbGljZShob3N0LmluZGV4T2YoJ0AnKSArIDEpKVxuXG4gIGNvbnN0IHVybE9iaiA9IG5ldyBVUkwodXJsLnJlcGxhY2UoaG9zdCwgaG9zdC5zcGxpdCgnLCcpWzBdKSlcblxuICByZXR1cm4ge1xuICAgIHVybDoge1xuICAgICAgdXNlcm5hbWU6IGRlY29kZVVSSUNvbXBvbmVudCh1cmxPYmoudXNlcm5hbWUpLFxuICAgICAgcGFzc3dvcmQ6IGRlY29kZVVSSUNvbXBvbmVudCh1cmxPYmoucGFzc3dvcmQpLFxuICAgICAgaG9zdDogdXJsT2JqLmhvc3QsXG4gICAgICBob3N0bmFtZTogdXJsT2JqLmhvc3RuYW1lLFxuICAgICAgcG9ydDogdXJsT2JqLnBvcnQsXG4gICAgICBwYXRobmFtZTogdXJsT2JqLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoUGFyYW1zOiB1cmxPYmouc2VhcmNoUGFyYW1zXG4gICAgfSxcbiAgICBtdWx0aWhvc3Q6IGhvc3QuaW5kZXhPZignLCcpID4gLTEgJiYgaG9zdFxuICB9XG59XG5cbmZ1bmN0aW9uIG9zVXNlcm5hbWUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIG9zLnVzZXJJbmZvKCkudXNlcm5hbWUgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICB9IGNhdGNoIChfKSB7XG4gICAgcmV0dXJuIHByb2Nlc3MuZW52LlVTRVJOQU1FIHx8IHByb2Nlc3MuZW52LlVTRVIgfHwgcHJvY2Vzcy5lbnYuTE9HTkFNRSAgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICB9XG59XG4iXSwibmFtZXMiOlsib3MiLCJmcyIsIm1lcmdlVXNlclR5cGVzIiwiaW5mZXJUeXBlIiwiUGFyYW1ldGVyIiwiSWRlbnRpZmllciIsIkJ1aWxkZXIiLCJ0b1Bhc2NhbCIsInBhc2NhbCIsInRvQ2FtZWwiLCJjYW1lbCIsInRvS2ViYWIiLCJrZWJhYiIsImZyb21QYXNjYWwiLCJmcm9tQ2FtZWwiLCJmcm9tS2ViYWIiLCJDb25uZWN0aW9uIiwiUXVlcnkiLCJDTE9TRSIsIlF1ZXVlIiwiRXJyb3JzIiwiUG9zdGdyZXNFcnJvciIsIlN1YnNjcmliZSIsImxhcmdlT2JqZWN0IiwiT2JqZWN0IiwiYXNzaWduIiwiUG9zdGdyZXMiLCJCaWdJbnQiLCJ0byIsImZyb20iLCJwYXJzZSIsIngiLCJzZXJpYWxpemUiLCJ0b1N0cmluZyIsImEiLCJiIiwib3B0aW9ucyIsInBhcnNlT3B0aW9ucyIsInN1YnNjcmliZSIsIm5vX3N1YnNjcmliZSIsImVuZGluZyIsInF1ZXJpZXMiLCJjb25uZWN0aW5nIiwicmVzZXJ2ZWQiLCJjbG9zZWQiLCJlbmRlZCIsIm9wZW4iLCJidXN5IiwiZnVsbCIsInF1ZXVlcyIsImNvbm5lY3Rpb25zIiwiQXJyYXkiLCJtYXgiLCJtYXAiLCJvbm9wZW4iLCJvbmVuZCIsIm9uY2xvc2UiLCJzcWwiLCJTcWwiLCJoYW5kbGVyIiwicGFyYW1ldGVycyIsImJpbmQiLCJFTkQiLCJyZXNlcnZlIiwibGlzdGVuIiwiYmVnaW4iLCJjbG9zZSIsImVuZCIsImRlYnVnIiwiZW50cmllcyIsInR5cGVzIiwicmVkdWNlIiwiYWNjIiwibmFtZSIsInR5cGUiLCJ0eXBlZCIsInVuc2FmZSIsIm5vdGlmeSIsImFycmF5IiwianNvbiIsImZpbGUiLCJ2YWx1ZSIsInN0cmluZ3MiLCJhcmdzIiwicXVlcnkiLCJpc0FycmF5IiwicmF3IiwiY2FuY2VsIiwibGVuZ3RoIiwidHJhbnNmb3JtIiwiY29sdW1uIiwic3RyaW5nIiwiYXJndW1lbnRzIiwicHJlcGFyZSIsInNpbXBsZSIsInBhdGgiLCJyZWFkRmlsZSIsImVyciIsInJlamVjdCIsImZuIiwib25saXN0ZW4iLCJsaXN0ZW5lciIsImlkbGVfdGltZW91dCIsIm1heF9saWZldGltZSIsImZldGNoX3R5cGVzIiwiY2hhbm5lbHMiLCJmb3JFYWNoIiwibGlzdGVuZXJzIiwiUHJvbWlzZSIsImFsbCIsImwiLCJjYXRjaCIsIm9ubm90aWZ5IiwiYyIsImV4aXN0cyIsInB1c2giLCJyZXN1bHQiLCJzdGF0ZSIsInVubGlzdGVuIiwicmVwbGFjZSIsImZpbHRlciIsImNoYW5uZWwiLCJwYXlsb2FkIiwicXVldWUiLCJzaGlmdCIsInIiLCJjb25uZWN0IiwibW92ZSIsImV4ZWN1dGUiLCJyZWxlYXNlIiwicSIsInNhdmVwb2ludHMiLCJjb25uZWN0aW9uIiwib25leGVjdXRlIiwicmFjZSIsInNjb3BlIiwiXyIsImVycm9yIiwic2F2ZXBvaW50IiwidW5jYXVnaHRFcnJvciIsInJlc29sdmUiLCJ0aGVuIiwiZSIsImNvZGUiLCJhcHBseSIsInJlbW92ZSIsImlkbGVUaW1lciIsInN0YXJ0Iiwic2hhcmVkIiwidHlwZUFycmF5TWFwIiwiZ28iLCJhY3RpdmUiLCJjYW5jZWxsZWQiLCJnZW5lcmljIiwidGltZW91dCIsInRpbWVyIiwic2V0VGltZW91dCIsImRlc3Ryb3kiLCJjb25jYXQiLCJjbGVhclRpbWVvdXQiLCJ0ZXJtaW5hdGUiLCJNYXRoIiwiY2VpbCIsInJlYWR5IiwiaWQiLCJlbnYiLCJwcm9jZXNzIiwibyIsInVybCIsIm11bHRpaG9zdCIsInBhcnNlVXJsIiwic2VhcmNoUGFyYW1zIiwiaG9zdCIsImhvc3RuYW1lIiwiUEdIT1NUIiwicG9ydCIsIlBHUE9SVCIsInVzZXIiLCJ1c2VybmFtZSIsIlBHVVNFUk5BTUUiLCJQR1VTRVIiLCJvc1VzZXJuYW1lIiwibm9fcHJlcGFyZSIsInNzbG1vZGUiLCJzc2wiLCJjb25zb2xlIiwibG9nIiwic3Nscm9vdGNlcnQiLCJpbnRzIiwiZGVmYXVsdHMiLCJjb25uZWN0X3RpbWVvdXQiLCJtYXhfcGlwZWxpbmUiLCJiYWNrb2ZmIiwia2VlcF9hbGl2ZSIsInB1YmxpY2F0aW9ucyIsInRhcmdldF9zZXNzaW9uX2F0dHJzIiwic3BsaXQiLCJwYXJzZUludCIsImluZGV4T2YiLCJkYXRhYmFzZSIsImRiIiwicGF0aG5hbWUiLCJzbGljZSIsIlBHREFUQUJBU0UiLCJwYXNzIiwicGFzc3dvcmQiLCJQR1BBU1NXT1JEIiwiayIsImQiLCJ0b1VwcGVyQ2FzZSIsImluY2x1ZGVzIiwiYXBwbGljYXRpb25fbmFtZSIsInYiLCJ0c2EiLCJvbm5vdGljZSIsIm9ucGFyYW1ldGVyIiwic29ja2V0IiwicGFyc2VUcmFuc2Zvcm0iLCJ1bmRlZmluZWQiLCJyZXRyaWVzIiwiZ2V0IiwiUEdUQVJHRVRTRVNTSU9OQVRUUlMiLCJFcnJvciIsInJhbmRvbSIsIm1pbiIsInJvdyIsIk1hcCIsImRlY29kZVVSSUNvbXBvbmVudCIsInVybE9iaiIsIlVSTCIsInVzZXJJbmZvIiwiVVNFUk5BTUUiLCJVU0VSIiwiTE9HTkFNRSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/postgres/src/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/postgres/src/large.js":
/*!********************************************!*\
  !*** ./node_modules/postgres/src/large.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ largeObject)\n/* harmony export */ });\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream */ \"stream\");\n\nfunction largeObject(sql, oid, mode = 0x00020000 | 0x00040000) {\n    return new Promise(async (resolve, reject)=>{\n        await sql.begin(async (sql)=>{\n            let finish;\n            !oid && ([{ oid }] = await sql`select lo_creat(-1) as oid`);\n            const [{ fd }] = await sql`select lo_open(${oid}, ${mode}) as fd`;\n            const lo = {\n                writable,\n                readable,\n                close: ()=>sql`select lo_close(${fd})`.then(finish),\n                tell: ()=>sql`select lo_tell64(${fd})`,\n                read: (x)=>sql`select loread(${fd}, ${x}) as data`,\n                write: (x)=>sql`select lowrite(${fd}, ${x})`,\n                truncate: (x)=>sql`select lo_truncate64(${fd}, ${x})`,\n                seek: (x, whence = 0)=>sql`select lo_lseek64(${fd}, ${x}, ${whence})`,\n                size: ()=>sql`\n          select\n            lo_lseek64(${fd}, location, 0) as position,\n            seek.size\n          from (\n            select\n              lo_lseek64($1, 0, 2) as size,\n              tell.location\n            from (select lo_tell64($1) as location) tell\n          ) seek\n        `\n            };\n            resolve(lo);\n            return new Promise(async (r)=>finish = r);\n            async function readable({ highWaterMark = 2048 * 8, start = 0, end = Infinity } = {}) {\n                let max = end - start;\n                start && await lo.seek(start);\n                return new stream__WEBPACK_IMPORTED_MODULE_0__.Readable({\n                    highWaterMark,\n                    async read (size) {\n                        const l = size > max ? size - max : size;\n                        max -= size;\n                        const [{ data }] = await lo.read(l);\n                        this.push(data);\n                        if (data.length < size) this.push(null);\n                    }\n                });\n            }\n            async function writable({ highWaterMark = 2048 * 8, start = 0 } = {}) {\n                start && await lo.seek(start);\n                return new stream__WEBPACK_IMPORTED_MODULE_0__.Writable({\n                    highWaterMark,\n                    write (chunk, encoding, callback) {\n                        lo.write(chunk).then(()=>callback(), callback);\n                    }\n                });\n            }\n        }).catch(reject);\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcG9zdGdyZXMvc3JjL2xhcmdlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTJCO0FBRVosU0FBU0MsWUFBWUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLE9BQU8sYUFBYSxVQUFVO0lBQzFFLE9BQU8sSUFBSUMsUUFBUSxPQUFNQyxTQUFTQztRQUNoQyxNQUFNTCxJQUFJTSxLQUFLLENBQUMsT0FBTU47WUFDcEIsSUFBSU87WUFDSixDQUFDTixPQUFRLEVBQUMsRUFBRUEsR0FBRyxFQUFFLENBQUMsR0FBRyxNQUFNRCxHQUFHLENBQUMsMEJBQTBCLENBQUM7WUFDMUQsTUFBTSxDQUFDLEVBQUVRLEVBQUUsRUFBRSxDQUFDLEdBQUcsTUFBTVIsR0FBRyxDQUFDLGVBQWUsRUFBR0MsSUFBSyxFQUFFLEVBQUdDLEtBQU0sT0FBTyxDQUFDO1lBRXJFLE1BQU1PLEtBQUs7Z0JBQ1RDO2dCQUNBQztnQkFDQUMsT0FBWSxJQUFNWixHQUFHLENBQUMsZ0JBQWdCLEVBQUdRLEdBQUksQ0FBQyxDQUFDLENBQUNLLElBQUksQ0FBQ047Z0JBQ3JETyxNQUFZLElBQU1kLEdBQUcsQ0FBQyxpQkFBaUIsRUFBR1EsR0FBSSxDQUFDLENBQUM7Z0JBQ2hETyxNQUFZLENBQUNDLElBQU1oQixHQUFHLENBQUMsY0FBYyxFQUFHUSxHQUFJLEVBQUUsRUFBR1EsRUFBRyxTQUFTLENBQUM7Z0JBQzlEQyxPQUFZLENBQUNELElBQU1oQixHQUFHLENBQUMsZUFBZSxFQUFHUSxHQUFJLEVBQUUsRUFBR1EsRUFBRyxDQUFDLENBQUM7Z0JBQ3ZERSxVQUFZLENBQUNGLElBQU1oQixHQUFHLENBQUMscUJBQXFCLEVBQUdRLEdBQUksRUFBRSxFQUFHUSxFQUFHLENBQUMsQ0FBQztnQkFDN0RHLE1BQVksQ0FBQ0gsR0FBR0ksU0FBUyxDQUFDLEdBQUtwQixHQUFHLENBQUMsa0JBQWtCLEVBQUdRLEdBQUksRUFBRSxFQUFHUSxFQUFHLEVBQUUsRUFBR0ksT0FBUSxDQUFDLENBQUM7Z0JBQ25GQyxNQUFZLElBQU1yQixHQUFHLENBQUM7O3VCQUVQLEVBQUdRLEdBQUk7Ozs7Ozs7O1FBUXRCLENBQUM7WUFDSDtZQUVBSixRQUFRSztZQUVSLE9BQU8sSUFBSU4sUUFBUSxPQUFNbUIsSUFBS2YsU0FBU2U7WUFFdkMsZUFBZVgsU0FBUyxFQUN0QlksZ0JBQWdCLE9BQU8sQ0FBQyxFQUN4QkMsUUFBUSxDQUFDLEVBQ1RDLE1BQU1DLFFBQVEsRUFDZixHQUFHLENBQUMsQ0FBQztnQkFDSixJQUFJQyxNQUFNRixNQUFNRDtnQkFDaEJBLFNBQVMsTUFBTWYsR0FBR1UsSUFBSSxDQUFDSztnQkFDdkIsT0FBTyxJQUFJMUIsNENBQWUsQ0FBQztvQkFDekJ5QjtvQkFDQSxNQUFNUixNQUFLTSxJQUFJO3dCQUNiLE1BQU1RLElBQUlSLE9BQU9NLE1BQU1OLE9BQU9NLE1BQU1OO3dCQUNwQ00sT0FBT047d0JBQ1AsTUFBTSxDQUFDLEVBQUVTLElBQUksRUFBRSxDQUFDLEdBQUcsTUFBTXJCLEdBQUdNLElBQUksQ0FBQ2M7d0JBQ2pDLElBQUksQ0FBQ0UsSUFBSSxDQUFDRDt3QkFDVixJQUFJQSxLQUFLRSxNQUFNLEdBQUdYLE1BQ2hCLElBQUksQ0FBQ1UsSUFBSSxDQUFDO29CQUNkO2dCQUNGO1lBQ0Y7WUFFQSxlQUFlckIsU0FBUyxFQUN0QmEsZ0JBQWdCLE9BQU8sQ0FBQyxFQUN4QkMsUUFBUSxDQUFDLEVBQ1YsR0FBRyxDQUFDLENBQUM7Z0JBQ0pBLFNBQVMsTUFBTWYsR0FBR1UsSUFBSSxDQUFDSztnQkFDdkIsT0FBTyxJQUFJMUIsNENBQWUsQ0FBQztvQkFDekJ5QjtvQkFDQU4sT0FBTWlCLEtBQUssRUFBRUMsUUFBUSxFQUFFQyxRQUFRO3dCQUM3QjNCLEdBQUdRLEtBQUssQ0FBQ2lCLE9BQU9yQixJQUFJLENBQUMsSUFBTXVCLFlBQVlBO29CQUN6QztnQkFDRjtZQUNGO1FBQ0YsR0FBR0MsS0FBSyxDQUFDaEM7SUFDWDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGVyaW9kLXRyYWNrZXIvLi9ub2RlX21vZHVsZXMvcG9zdGdyZXMvc3JjL2xhcmdlLmpzPzY2YzMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFN0cmVhbSBmcm9tICdzdHJlYW0nXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxhcmdlT2JqZWN0KHNxbCwgb2lkLCBtb2RlID0gMHgwMDAyMDAwMCB8IDB4MDAwNDAwMDApIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGF3YWl0IHNxbC5iZWdpbihhc3luYyBzcWwgPT4ge1xuICAgICAgbGV0IGZpbmlzaFxuICAgICAgIW9pZCAmJiAoW3sgb2lkIH1dID0gYXdhaXQgc3FsYHNlbGVjdCBsb19jcmVhdCgtMSkgYXMgb2lkYClcbiAgICAgIGNvbnN0IFt7IGZkIH1dID0gYXdhaXQgc3FsYHNlbGVjdCBsb19vcGVuKCR7IG9pZCB9LCAkeyBtb2RlIH0pIGFzIGZkYFxuXG4gICAgICBjb25zdCBsbyA9IHtcbiAgICAgICAgd3JpdGFibGUsXG4gICAgICAgIHJlYWRhYmxlLFxuICAgICAgICBjbG9zZSAgICAgOiAoKSA9PiBzcWxgc2VsZWN0IGxvX2Nsb3NlKCR7IGZkIH0pYC50aGVuKGZpbmlzaCksXG4gICAgICAgIHRlbGwgICAgICA6ICgpID0+IHNxbGBzZWxlY3QgbG9fdGVsbDY0KCR7IGZkIH0pYCxcbiAgICAgICAgcmVhZCAgICAgIDogKHgpID0+IHNxbGBzZWxlY3QgbG9yZWFkKCR7IGZkIH0sICR7IHggfSkgYXMgZGF0YWAsXG4gICAgICAgIHdyaXRlICAgICA6ICh4KSA9PiBzcWxgc2VsZWN0IGxvd3JpdGUoJHsgZmQgfSwgJHsgeCB9KWAsXG4gICAgICAgIHRydW5jYXRlICA6ICh4KSA9PiBzcWxgc2VsZWN0IGxvX3RydW5jYXRlNjQoJHsgZmQgfSwgJHsgeCB9KWAsXG4gICAgICAgIHNlZWsgICAgICA6ICh4LCB3aGVuY2UgPSAwKSA9PiBzcWxgc2VsZWN0IGxvX2xzZWVrNjQoJHsgZmQgfSwgJHsgeCB9LCAkeyB3aGVuY2UgfSlgLFxuICAgICAgICBzaXplICAgICAgOiAoKSA9PiBzcWxgXG4gICAgICAgICAgc2VsZWN0XG4gICAgICAgICAgICBsb19sc2VlazY0KCR7IGZkIH0sIGxvY2F0aW9uLCAwKSBhcyBwb3NpdGlvbixcbiAgICAgICAgICAgIHNlZWsuc2l6ZVxuICAgICAgICAgIGZyb20gKFxuICAgICAgICAgICAgc2VsZWN0XG4gICAgICAgICAgICAgIGxvX2xzZWVrNjQoJDEsIDAsIDIpIGFzIHNpemUsXG4gICAgICAgICAgICAgIHRlbGwubG9jYXRpb25cbiAgICAgICAgICAgIGZyb20gKHNlbGVjdCBsb190ZWxsNjQoJDEpIGFzIGxvY2F0aW9uKSB0ZWxsXG4gICAgICAgICAgKSBzZWVrXG4gICAgICAgIGBcbiAgICAgIH1cblxuICAgICAgcmVzb2x2ZShsbylcblxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIHIgPT4gZmluaXNoID0gcilcblxuICAgICAgYXN5bmMgZnVuY3Rpb24gcmVhZGFibGUoe1xuICAgICAgICBoaWdoV2F0ZXJNYXJrID0gMjA0OCAqIDgsXG4gICAgICAgIHN0YXJ0ID0gMCxcbiAgICAgICAgZW5kID0gSW5maW5pdHlcbiAgICAgIH0gPSB7fSkge1xuICAgICAgICBsZXQgbWF4ID0gZW5kIC0gc3RhcnRcbiAgICAgICAgc3RhcnQgJiYgYXdhaXQgbG8uc2VlayhzdGFydClcbiAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW0uUmVhZGFibGUoe1xuICAgICAgICAgIGhpZ2hXYXRlck1hcmssXG4gICAgICAgICAgYXN5bmMgcmVhZChzaXplKSB7XG4gICAgICAgICAgICBjb25zdCBsID0gc2l6ZSA+IG1heCA/IHNpemUgLSBtYXggOiBzaXplXG4gICAgICAgICAgICBtYXggLT0gc2l6ZVxuICAgICAgICAgICAgY29uc3QgW3sgZGF0YSB9XSA9IGF3YWl0IGxvLnJlYWQobClcbiAgICAgICAgICAgIHRoaXMucHVzaChkYXRhKVxuICAgICAgICAgICAgaWYgKGRhdGEubGVuZ3RoIDwgc2l6ZSlcbiAgICAgICAgICAgICAgdGhpcy5wdXNoKG51bGwpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICBhc3luYyBmdW5jdGlvbiB3cml0YWJsZSh7XG4gICAgICAgIGhpZ2hXYXRlck1hcmsgPSAyMDQ4ICogOCxcbiAgICAgICAgc3RhcnQgPSAwXG4gICAgICB9ID0ge30pIHtcbiAgICAgICAgc3RhcnQgJiYgYXdhaXQgbG8uc2VlayhzdGFydClcbiAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW0uV3JpdGFibGUoe1xuICAgICAgICAgIGhpZ2hXYXRlck1hcmssXG4gICAgICAgICAgd3JpdGUoY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgbG8ud3JpdGUoY2h1bmspLnRoZW4oKCkgPT4gY2FsbGJhY2soKSwgY2FsbGJhY2spXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pLmNhdGNoKHJlamVjdClcbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJTdHJlYW0iLCJsYXJnZU9iamVjdCIsInNxbCIsIm9pZCIsIm1vZGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImJlZ2luIiwiZmluaXNoIiwiZmQiLCJsbyIsIndyaXRhYmxlIiwicmVhZGFibGUiLCJjbG9zZSIsInRoZW4iLCJ0ZWxsIiwicmVhZCIsIngiLCJ3cml0ZSIsInRydW5jYXRlIiwic2VlayIsIndoZW5jZSIsInNpemUiLCJyIiwiaGlnaFdhdGVyTWFyayIsInN0YXJ0IiwiZW5kIiwiSW5maW5pdHkiLCJtYXgiLCJSZWFkYWJsZSIsImwiLCJkYXRhIiwicHVzaCIsImxlbmd0aCIsIldyaXRhYmxlIiwiY2h1bmsiLCJlbmNvZGluZyIsImNhbGxiYWNrIiwiY2F0Y2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/postgres/src/large.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/postgres/src/query.js":
/*!********************************************!*\
  !*** ./node_modules/postgres/src/query.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CLOSE: () => (/* binding */ CLOSE),\n/* harmony export */   Query: () => (/* binding */ Query)\n/* harmony export */ });\nconst originCache = new Map(), originStackCache = new Map(), originError = Symbol(\"OriginError\");\nconst CLOSE = {};\nclass Query extends Promise {\n    constructor(strings, args, handler, canceller, options = {}){\n        let resolve, reject;\n        super((a, b)=>{\n            resolve = a;\n            reject = b;\n        });\n        this.tagged = Array.isArray(strings.raw);\n        this.strings = strings;\n        this.args = args;\n        this.handler = handler;\n        this.canceller = canceller;\n        this.options = options;\n        this.state = null;\n        this.statement = null;\n        this.resolve = (x)=>(this.active = false, resolve(x));\n        this.reject = (x)=>(this.active = false, reject(x));\n        this.active = false;\n        this.cancelled = null;\n        this.executed = false;\n        this.signature = \"\";\n        this[originError] = this.handler.debug ? new Error() : this.tagged && cachedError(this.strings);\n    }\n    get origin() {\n        return (this.handler.debug ? this[originError].stack : this.tagged && originStackCache.has(this.strings) ? originStackCache.get(this.strings) : originStackCache.set(this.strings, this[originError].stack).get(this.strings)) || \"\";\n    }\n    static get [Symbol.species]() {\n        return Promise;\n    }\n    cancel() {\n        return this.canceller && (this.canceller(this), this.canceller = null);\n    }\n    simple() {\n        this.options.simple = true;\n        this.options.prepare = false;\n        return this;\n    }\n    async readable() {\n        this.simple();\n        this.streaming = true;\n        return this;\n    }\n    async writable() {\n        this.simple();\n        this.streaming = true;\n        return this;\n    }\n    cursor(rows = 1, fn) {\n        this.options.simple = false;\n        if (typeof rows === \"function\") {\n            fn = rows;\n            rows = 1;\n        }\n        this.cursorRows = rows;\n        if (typeof fn === \"function\") return this.cursorFn = fn, this;\n        let prev;\n        return {\n            [Symbol.asyncIterator]: ()=>({\n                    next: ()=>{\n                        if (this.executed && !this.active) return {\n                            done: true\n                        };\n                        prev && prev();\n                        const promise = new Promise((resolve, reject)=>{\n                            this.cursorFn = (value)=>{\n                                resolve({\n                                    value,\n                                    done: false\n                                });\n                                return new Promise((r)=>prev = r);\n                            };\n                            this.resolve = ()=>(this.active = false, resolve({\n                                    done: true\n                                }));\n                            this.reject = (x)=>(this.active = false, reject(x));\n                        });\n                        this.execute();\n                        return promise;\n                    },\n                    return () {\n                        prev && prev(CLOSE);\n                        return {\n                            done: true\n                        };\n                    }\n                })\n        };\n    }\n    describe() {\n        this.options.simple = false;\n        this.onlyDescribe = this.options.prepare = true;\n        return this;\n    }\n    stream() {\n        throw new Error(\".stream has been renamed to .forEach\");\n    }\n    forEach(fn) {\n        this.forEachFn = fn;\n        this.handle();\n        return this;\n    }\n    raw() {\n        this.isRaw = true;\n        return this;\n    }\n    values() {\n        this.isRaw = \"values\";\n        return this;\n    }\n    async handle() {\n        !this.executed && (this.executed = true) && await 1 && this.handler(this);\n    }\n    execute() {\n        this.handle();\n        return this;\n    }\n    then() {\n        this.handle();\n        return super.then.apply(this, arguments);\n    }\n    catch() {\n        this.handle();\n        return super.catch.apply(this, arguments);\n    }\n    finally() {\n        this.handle();\n        return super.finally.apply(this, arguments);\n    }\n}\nfunction cachedError(xs) {\n    if (originCache.has(xs)) return originCache.get(xs);\n    const x = Error.stackTraceLimit;\n    Error.stackTraceLimit = 4;\n    originCache.set(xs, new Error());\n    Error.stackTraceLimit = x;\n    return originCache.get(xs);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/postgres/src/query.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/postgres/src/queue.js":
/*!********************************************!*\
  !*** ./node_modules/postgres/src/queue.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Queue);\nfunction Queue(initial = []) {\n    let xs = initial.slice();\n    let index = 0;\n    return {\n        get length () {\n            return xs.length - index;\n        },\n        remove: (x)=>{\n            const index = xs.indexOf(x);\n            return index === -1 ? null : (xs.splice(index, 1), x);\n        },\n        push: (x)=>(xs.push(x), x),\n        shift: ()=>{\n            const out = xs[index++];\n            if (index === xs.length) {\n                index = 0;\n                xs = [];\n            } else {\n                xs[index - 1] = undefined;\n            }\n            return out;\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcG9zdGdyZXMvc3JjL3F1ZXVlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZUEsS0FBS0EsRUFBQTtBQUVwQixTQUFTQSxNQUFNQyxVQUFVLEVBQUU7SUFDekIsSUFBSUMsS0FBS0QsUUFBUUUsS0FBSztJQUN0QixJQUFJQyxRQUFRO0lBRVosT0FBTztRQUNMLElBQUlDLFVBQVM7WUFDWCxPQUFPSCxHQUFHRyxNQUFNLEdBQUdEO1FBQ3JCO1FBQ0FFLFFBQVEsQ0FBQ0M7WUFDUCxNQUFNSCxRQUFRRixHQUFHTSxPQUFPLENBQUNEO1lBQ3pCLE9BQU9ILFVBQVUsQ0FBQyxJQUNkLE9BQ0NGLENBQUFBLEdBQUdPLE1BQU0sQ0FBQ0wsT0FBTyxJQUFJRyxDQUFBQTtRQUM1QjtRQUNBRyxNQUFNLENBQUNILElBQU9MLENBQUFBLEdBQUdRLElBQUksQ0FBQ0gsSUFBSUEsQ0FBQUE7UUFDMUJJLE9BQU87WUFDTCxNQUFNQyxNQUFNVixFQUFFLENBQUNFLFFBQVE7WUFFdkIsSUFBSUEsVUFBVUYsR0FBR0csTUFBTSxFQUFFO2dCQUN2QkQsUUFBUTtnQkFDUkYsS0FBSyxFQUFFO1lBQ1QsT0FBTztnQkFDTEEsRUFBRSxDQUFDRSxRQUFRLEVBQUUsR0FBR1M7WUFDbEI7WUFFQSxPQUFPRDtRQUNUO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL3BlcmlvZC10cmFja2VyLy4vbm9kZV9tb2R1bGVzL3Bvc3RncmVzL3NyYy9xdWV1ZS5qcz8zY2ZjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFF1ZXVlXG5cbmZ1bmN0aW9uIFF1ZXVlKGluaXRpYWwgPSBbXSkge1xuICBsZXQgeHMgPSBpbml0aWFsLnNsaWNlKClcbiAgbGV0IGluZGV4ID0gMFxuXG4gIHJldHVybiB7XG4gICAgZ2V0IGxlbmd0aCgpIHtcbiAgICAgIHJldHVybiB4cy5sZW5ndGggLSBpbmRleFxuICAgIH0sXG4gICAgcmVtb3ZlOiAoeCkgPT4ge1xuICAgICAgY29uc3QgaW5kZXggPSB4cy5pbmRleE9mKHgpXG4gICAgICByZXR1cm4gaW5kZXggPT09IC0xXG4gICAgICAgID8gbnVsbFxuICAgICAgICA6ICh4cy5zcGxpY2UoaW5kZXgsIDEpLCB4KVxuICAgIH0sXG4gICAgcHVzaDogKHgpID0+ICh4cy5wdXNoKHgpLCB4KSxcbiAgICBzaGlmdDogKCkgPT4ge1xuICAgICAgY29uc3Qgb3V0ID0geHNbaW5kZXgrK11cblxuICAgICAgaWYgKGluZGV4ID09PSB4cy5sZW5ndGgpIHtcbiAgICAgICAgaW5kZXggPSAwXG4gICAgICAgIHhzID0gW11cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHhzW2luZGV4IC0gMV0gPSB1bmRlZmluZWRcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG91dFxuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbIlF1ZXVlIiwiaW5pdGlhbCIsInhzIiwic2xpY2UiLCJpbmRleCIsImxlbmd0aCIsInJlbW92ZSIsIngiLCJpbmRleE9mIiwic3BsaWNlIiwicHVzaCIsInNoaWZ0Iiwib3V0IiwidW5kZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/postgres/src/queue.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/postgres/src/result.js":
/*!*********************************************!*\
  !*** ./node_modules/postgres/src/result.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Result)\n/* harmony export */ });\nclass Result extends Array {\n    constructor(){\n        super();\n        Object.defineProperties(this, {\n            count: {\n                value: null,\n                writable: true\n            },\n            state: {\n                value: null,\n                writable: true\n            },\n            command: {\n                value: null,\n                writable: true\n            },\n            columns: {\n                value: null,\n                writable: true\n            },\n            statement: {\n                value: null,\n                writable: true\n            }\n        });\n    }\n    static get [Symbol.species]() {\n        return Array;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcG9zdGdyZXMvc3JjL3Jlc3VsdC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQWUsTUFBTUEsZUFBZUM7SUFDbENDLGFBQWM7UUFDWixLQUFLO1FBQ0xDLE9BQU9DLGdCQUFnQixDQUFDLElBQUksRUFBRTtZQUM1QkMsT0FBTztnQkFBRUMsT0FBTztnQkFBTUMsVUFBVTtZQUFLO1lBQ3JDQyxPQUFPO2dCQUFFRixPQUFPO2dCQUFNQyxVQUFVO1lBQUs7WUFDckNFLFNBQVM7Z0JBQUVILE9BQU87Z0JBQU1DLFVBQVU7WUFBSztZQUN2Q0csU0FBUztnQkFBRUosT0FBTztnQkFBTUMsVUFBVTtZQUFLO1lBQ3ZDSSxXQUFXO2dCQUFFTCxPQUFPO2dCQUFNQyxVQUFVO1lBQUs7UUFDM0M7SUFDRjtJQUVBLFdBQVcsQ0FBQ0ssT0FBT0MsT0FBTyxDQUFDLEdBQUc7UUFDNUIsT0FBT1o7SUFDVDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGVyaW9kLXRyYWNrZXIvLi9ub2RlX21vZHVsZXMvcG9zdGdyZXMvc3JjL3Jlc3VsdC5qcz9mNWQwIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlc3VsdCBleHRlbmRzIEFycmF5IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICAgIGNvdW50OiB7IHZhbHVlOiBudWxsLCB3cml0YWJsZTogdHJ1ZSB9LFxuICAgICAgc3RhdGU6IHsgdmFsdWU6IG51bGwsIHdyaXRhYmxlOiB0cnVlIH0sXG4gICAgICBjb21tYW5kOiB7IHZhbHVlOiBudWxsLCB3cml0YWJsZTogdHJ1ZSB9LFxuICAgICAgY29sdW1uczogeyB2YWx1ZTogbnVsbCwgd3JpdGFibGU6IHRydWUgfSxcbiAgICAgIHN0YXRlbWVudDogeyB2YWx1ZTogbnVsbCwgd3JpdGFibGU6IHRydWUgfVxuICAgIH0pXG4gIH1cblxuICBzdGF0aWMgZ2V0IFtTeW1ib2wuc3BlY2llc10oKSB7XG4gICAgcmV0dXJuIEFycmF5XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJSZXN1bHQiLCJBcnJheSIsImNvbnN0cnVjdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydGllcyIsImNvdW50IiwidmFsdWUiLCJ3cml0YWJsZSIsInN0YXRlIiwiY29tbWFuZCIsImNvbHVtbnMiLCJzdGF0ZW1lbnQiLCJTeW1ib2wiLCJzcGVjaWVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/postgres/src/result.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/postgres/src/subscribe.js":
/*!************************************************!*\
  !*** ./node_modules/postgres/src/subscribe.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Subscribe)\n/* harmony export */ });\nconst noop = ()=>{};\nfunction Subscribe(postgres, options) {\n    const subscribers = new Map(), slot = \"postgresjs_\" + Math.random().toString(36).slice(2), state = {};\n    let connection, stream, ended = false;\n    const sql = subscribe.sql = postgres({\n        ...options,\n        transform: {\n            column: {},\n            value: {},\n            row: {}\n        },\n        max: 1,\n        fetch_types: false,\n        idle_timeout: null,\n        max_lifetime: null,\n        connection: {\n            ...options.connection,\n            replication: \"database\"\n        },\n        onclose: async function() {\n            if (ended) return;\n            stream = null;\n            state.pid = state.secret = undefined;\n            connected(await init(sql, slot, options.publications));\n            subscribers.forEach((event)=>event.forEach(({ onsubscribe })=>onsubscribe()));\n        },\n        no_subscribe: true\n    });\n    const end = sql.end, close = sql.close;\n    sql.end = async ()=>{\n        ended = true;\n        stream && await new Promise((r)=>(stream.once(\"close\", r), stream.end()));\n        return end();\n    };\n    sql.close = async ()=>{\n        stream && await new Promise((r)=>(stream.once(\"close\", r), stream.end()));\n        return close();\n    };\n    return subscribe;\n    async function subscribe(event, fn, onsubscribe = noop, onerror = noop) {\n        event = parseEvent(event);\n        if (!connection) connection = init(sql, slot, options.publications);\n        const subscriber = {\n            fn,\n            onsubscribe\n        };\n        const fns = subscribers.has(event) ? subscribers.get(event).add(subscriber) : subscribers.set(event, new Set([\n            subscriber\n        ])).get(event);\n        const unsubscribe = ()=>{\n            fns.delete(subscriber);\n            fns.size === 0 && subscribers.delete(event);\n        };\n        return connection.then((x)=>{\n            connected(x);\n            onsubscribe();\n            stream && stream.on(\"error\", onerror);\n            return {\n                unsubscribe,\n                state,\n                sql\n            };\n        });\n    }\n    function connected(x) {\n        stream = x.stream;\n        state.pid = x.state.pid;\n        state.secret = x.state.secret;\n    }\n    async function init(sql, slot, publications) {\n        if (!publications) throw new Error(\"Missing publication names\");\n        const xs = await sql.unsafe(`CREATE_REPLICATION_SLOT ${slot} TEMPORARY LOGICAL pgoutput NOEXPORT_SNAPSHOT`);\n        const [x] = xs;\n        const stream = await sql.unsafe(`START_REPLICATION SLOT ${slot} LOGICAL ${x.consistent_point} (proto_version '1', publication_names '${publications}')`).writable();\n        const state = {\n            lsn: Buffer.concat(x.consistent_point.split(\"/\").map((x)=>Buffer.from((\"00000000\" + x).slice(-8), \"hex\")))\n        };\n        stream.on(\"data\", data);\n        stream.on(\"error\", error);\n        stream.on(\"close\", sql.close);\n        return {\n            stream,\n            state: xs.state\n        };\n        function error(e) {\n            console.error(\"Unexpected error during logical streaming - reconnecting\", e) // eslint-disable-line\n            ;\n        }\n        function data(x) {\n            if (x[0] === 0x77) {\n                parse(x.subarray(25), state, sql.options.parsers, handle, options.transform);\n            } else if (x[0] === 0x6b && x[17]) {\n                state.lsn = x.subarray(1, 9);\n                pong();\n            }\n        }\n        function handle(a, b) {\n            const path = b.relation.schema + \".\" + b.relation.table;\n            call(\"*\", a, b);\n            call(\"*:\" + path, a, b);\n            b.relation.keys.length && call(\"*:\" + path + \"=\" + b.relation.keys.map((x)=>a[x.name]), a, b);\n            call(b.command, a, b);\n            call(b.command + \":\" + path, a, b);\n            b.relation.keys.length && call(b.command + \":\" + path + \"=\" + b.relation.keys.map((x)=>a[x.name]), a, b);\n        }\n        function pong() {\n            const x = Buffer.alloc(34);\n            x[0] = \"r\".charCodeAt(0);\n            x.fill(state.lsn, 1);\n            x.writeBigInt64BE(BigInt(Date.now() - Date.UTC(2000, 0, 1)) * BigInt(1000), 25);\n            stream.write(x);\n        }\n    }\n    function call(x, a, b) {\n        subscribers.has(x) && subscribers.get(x).forEach(({ fn })=>fn(a, b, x));\n    }\n}\nfunction Time(x) {\n    return new Date(Date.UTC(2000, 0, 1) + Number(x / BigInt(1000)));\n}\nfunction parse(x, state, parsers, handle, transform) {\n    const char = (acc, [k, v])=>(acc[k.charCodeAt(0)] = v, acc);\n    Object.entries({\n        R: (x)=>{\n            let i = 1;\n            const r = state[x.readUInt32BE(i)] = {\n                schema: x.toString(\"utf8\", i += 4, i = x.indexOf(0, i)) || \"pg_catalog\",\n                table: x.toString(\"utf8\", i + 1, i = x.indexOf(0, i + 1)),\n                columns: Array(x.readUInt16BE(i += 2)),\n                keys: []\n            };\n            i += 2;\n            let columnIndex = 0, column;\n            while(i < x.length){\n                column = r.columns[columnIndex++] = {\n                    key: x[i++],\n                    name: transform.column.from ? transform.column.from(x.toString(\"utf8\", i, i = x.indexOf(0, i))) : x.toString(\"utf8\", i, i = x.indexOf(0, i)),\n                    type: x.readUInt32BE(i += 1),\n                    parser: parsers[x.readUInt32BE(i)],\n                    atttypmod: x.readUInt32BE(i += 4)\n                };\n                column.key && r.keys.push(column);\n                i += 4;\n            }\n        },\n        Y: ()=>{},\n        O: ()=>{},\n        B: (x)=>{\n            state.date = Time(x.readBigInt64BE(9));\n            state.lsn = x.subarray(1, 9);\n        },\n        I: (x)=>{\n            let i = 1;\n            const relation = state[x.readUInt32BE(i)];\n            const { row } = tuples(x, relation.columns, i += 7, transform);\n            handle(row, {\n                command: \"insert\",\n                relation\n            });\n        },\n        D: (x)=>{\n            let i = 1;\n            const relation = state[x.readUInt32BE(i)];\n            i += 4;\n            const key = x[i] === 75;\n            handle(key || x[i] === 79 ? tuples(x, relation.columns, i += 3, transform).row : null, {\n                command: \"delete\",\n                relation,\n                key\n            });\n        },\n        U: (x)=>{\n            let i = 1;\n            const relation = state[x.readUInt32BE(i)];\n            i += 4;\n            const key = x[i] === 75;\n            const xs = key || x[i] === 79 ? tuples(x, relation.columns, i += 3, transform) : null;\n            xs && (i = xs.i);\n            const { row } = tuples(x, relation.columns, i + 3, transform);\n            handle(row, {\n                command: \"update\",\n                relation,\n                key,\n                old: xs && xs.row\n            });\n        },\n        T: ()=>{},\n        C: ()=>{} // Commit\n    }).reduce(char, {})[x[0]](x);\n}\nfunction tuples(x, columns, xi, transform) {\n    let type, column, value;\n    const row = transform.raw ? new Array(columns.length) : {};\n    for(let i = 0; i < columns.length; i++){\n        type = x[xi++];\n        column = columns[i];\n        value = type === 110 // n\n         ? null : type === 117 // u\n         ? undefined : column.parser === undefined ? x.toString(\"utf8\", xi + 4, xi += 4 + x.readUInt32BE(xi)) : column.parser.array === true ? column.parser(x.toString(\"utf8\", xi + 5, xi += 4 + x.readUInt32BE(xi))) : column.parser(x.toString(\"utf8\", xi + 4, xi += 4 + x.readUInt32BE(xi)));\n        transform.raw ? row[i] = transform.raw === true ? value : transform.value.from ? transform.value.from(value, column) : value : row[column.name] = transform.value.from ? transform.value.from(value, column) : value;\n    }\n    return {\n        i: xi,\n        row: transform.row.from ? transform.row.from(row) : row\n    };\n}\nfunction parseEvent(x) {\n    const xs = x.match(/^(\\*|insert|update|delete)?:?([^.]+?\\.?[^=]+)?=?(.+)?/i) || [];\n    if (!xs) throw new Error(\"Malformed subscribe pattern: \" + x);\n    const [, command, path, key] = xs;\n    return (command || \"*\") + (path ? \":\" + (path.indexOf(\".\") === -1 ? \"public.\" + path : path) : \"\") + (key ? \"=\" + key : \"\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/postgres/src/subscribe.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/postgres/src/types.js":
/*!********************************************!*\
  !*** ./node_modules/postgres/src/types.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Builder: () => (/* binding */ Builder),\n/* harmony export */   END: () => (/* binding */ END),\n/* harmony export */   Identifier: () => (/* binding */ Identifier),\n/* harmony export */   Parameter: () => (/* binding */ Parameter),\n/* harmony export */   arrayParser: () => (/* binding */ arrayParser),\n/* harmony export */   arraySerializer: () => (/* binding */ arraySerializer),\n/* harmony export */   camel: () => (/* binding */ camel),\n/* harmony export */   escapeIdentifier: () => (/* binding */ escapeIdentifier),\n/* harmony export */   fromCamel: () => (/* binding */ fromCamel),\n/* harmony export */   fromKebab: () => (/* binding */ fromKebab),\n/* harmony export */   fromPascal: () => (/* binding */ fromPascal),\n/* harmony export */   handleValue: () => (/* binding */ handleValue),\n/* harmony export */   inferType: () => (/* binding */ inferType),\n/* harmony export */   kebab: () => (/* binding */ kebab),\n/* harmony export */   mergeUserTypes: () => (/* binding */ mergeUserTypes),\n/* harmony export */   parsers: () => (/* binding */ parsers),\n/* harmony export */   pascal: () => (/* binding */ pascal),\n/* harmony export */   serializers: () => (/* binding */ serializers),\n/* harmony export */   stringify: () => (/* binding */ stringify),\n/* harmony export */   toCamel: () => (/* binding */ toCamel),\n/* harmony export */   toKebab: () => (/* binding */ toKebab),\n/* harmony export */   toPascal: () => (/* binding */ toPascal),\n/* harmony export */   types: () => (/* binding */ types)\n/* harmony export */ });\n/* harmony import */ var _query_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./query.js */ \"(rsc)/./node_modules/postgres/src/query.js\");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors.js */ \"(rsc)/./node_modules/postgres/src/errors.js\");\n\n\nconst types = {\n    string: {\n        to: 25,\n        from: null,\n        serialize: (x)=>\"\" + x\n    },\n    number: {\n        to: 0,\n        from: [\n            21,\n            23,\n            26,\n            700,\n            701\n        ],\n        serialize: (x)=>\"\" + x,\n        parse: (x)=>+x\n    },\n    json: {\n        to: 114,\n        from: [\n            114,\n            3802\n        ],\n        serialize: (x)=>JSON.stringify(x),\n        parse: (x)=>JSON.parse(x)\n    },\n    boolean: {\n        to: 16,\n        from: 16,\n        serialize: (x)=>x === true ? \"t\" : \"f\",\n        parse: (x)=>x === \"t\"\n    },\n    date: {\n        to: 1184,\n        from: [\n            1082,\n            1114,\n            1184\n        ],\n        serialize: (x)=>(x instanceof Date ? x : new Date(x)).toISOString(),\n        parse: (x)=>new Date(x)\n    },\n    bytea: {\n        to: 17,\n        from: 17,\n        serialize: (x)=>\"\\\\x\" + Buffer.from(x).toString(\"hex\"),\n        parse: (x)=>Buffer.from(x.slice(2), \"hex\")\n    }\n};\nclass NotTagged {\n    then() {\n        notTagged();\n    }\n    catch() {\n        notTagged();\n    }\n    finally() {\n        notTagged();\n    }\n}\nclass Identifier extends NotTagged {\n    constructor(value){\n        super();\n        this.value = escapeIdentifier(value);\n    }\n}\nclass Parameter extends NotTagged {\n    constructor(value, type, array){\n        super();\n        this.value = value;\n        this.type = type;\n        this.array = array;\n    }\n}\nclass Builder extends NotTagged {\n    constructor(first, rest){\n        super();\n        this.first = first;\n        this.rest = rest;\n    }\n    build(before, parameters, types, options) {\n        const keyword = builders.map(([x, fn])=>({\n                fn,\n                i: before.search(x)\n            })).sort((a, b)=>a.i - b.i).pop();\n        return keyword.i === -1 ? escapeIdentifiers(this.first, options) : keyword.fn(this.first, this.rest, parameters, types, options);\n    }\n}\nfunction handleValue(x, parameters, types, options) {\n    let value = x instanceof Parameter ? x.value : x;\n    if (value === undefined) {\n        x instanceof Parameter ? x.value = options.transform.undefined : value = x = options.transform.undefined;\n        if (value === undefined) throw _errors_js__WEBPACK_IMPORTED_MODULE_1__.Errors.generic(\"UNDEFINED_VALUE\", \"Undefined values are not allowed\");\n    }\n    return \"$\" + types.push(x instanceof Parameter ? (parameters.push(x.value), x.array ? x.array[x.type || inferType(x.value)] || x.type || firstIsString(x.value) : x.type) : (parameters.push(x), inferType(x)));\n}\nconst defaultHandlers = typeHandlers(types);\nfunction stringify(q, string, value, parameters, types, options) {\n    for(let i = 1; i < q.strings.length; i++){\n        string += stringifyValue(string, value, parameters, types, options) + q.strings[i];\n        value = q.args[i];\n    }\n    return string;\n}\nfunction stringifyValue(string, value, parameters, types, o) {\n    return value instanceof Builder ? value.build(string, parameters, types, o) : value instanceof _query_js__WEBPACK_IMPORTED_MODULE_0__.Query ? fragment(value, parameters, types, o) : value instanceof Identifier ? value.value : value && value[0] instanceof _query_js__WEBPACK_IMPORTED_MODULE_0__.Query ? value.reduce((acc, x)=>acc + \" \" + fragment(x, parameters, types, o), \"\") : handleValue(value, parameters, types, o);\n}\nfunction fragment(q, parameters, types, options) {\n    q.fragment = true;\n    return stringify(q, q.strings[0], q.args[0], parameters, types, options);\n}\nfunction valuesBuilder(first, parameters, types, columns, options) {\n    return first.map((row)=>\"(\" + columns.map((column)=>stringifyValue(\"values\", row[column], parameters, types, options)).join(\",\") + \")\").join(\",\");\n}\nfunction values(first, rest, parameters, types, options) {\n    const multi = Array.isArray(first[0]);\n    const columns = rest.length ? rest.flat() : Object.keys(multi ? first[0] : first);\n    return valuesBuilder(multi ? first : [\n        first\n    ], parameters, types, columns, options);\n}\nfunction select(first, rest, parameters, types, options) {\n    typeof first === \"string\" && (first = [\n        first\n    ].concat(rest));\n    if (Array.isArray(first)) return escapeIdentifiers(first, options);\n    let value;\n    const columns = rest.length ? rest.flat() : Object.keys(first);\n    return columns.map((x)=>{\n        value = first[x];\n        return (value instanceof _query_js__WEBPACK_IMPORTED_MODULE_0__.Query ? fragment(value, parameters, types, options) : value instanceof Identifier ? value.value : handleValue(value, parameters, types, options)) + \" as \" + escapeIdentifier(options.transform.column.to ? options.transform.column.to(x) : x);\n    }).join(\",\");\n}\nconst builders = Object.entries({\n    values,\n    in: (...xs)=>{\n        const x = values(...xs);\n        return x === \"()\" ? \"(null)\" : x;\n    },\n    select,\n    as: select,\n    returning: select,\n    \"\\\\(\": select,\n    update (first, rest, parameters, types, options) {\n        return (rest.length ? rest.flat() : Object.keys(first)).map((x)=>escapeIdentifier(options.transform.column.to ? options.transform.column.to(x) : x) + \"=\" + stringifyValue(\"values\", first[x], parameters, types, options));\n    },\n    insert (first, rest, parameters, types, options) {\n        const columns = rest.length ? rest.flat() : Object.keys(Array.isArray(first) ? first[0] : first);\n        return \"(\" + escapeIdentifiers(columns, options) + \")values\" + valuesBuilder(Array.isArray(first) ? first : [\n            first\n        ], parameters, types, columns, options);\n    }\n}).map(([x, fn])=>[\n        new RegExp(\"((?:^|[\\\\s(])\" + x + \"(?:$|[\\\\s(]))(?![\\\\s\\\\S]*\\\\1)\", \"i\"),\n        fn\n    ]);\nfunction notTagged() {\n    throw _errors_js__WEBPACK_IMPORTED_MODULE_1__.Errors.generic(\"NOT_TAGGED_CALL\", \"Query not called as a tagged template literal\");\n}\nconst serializers = defaultHandlers.serializers;\nconst parsers = defaultHandlers.parsers;\nconst END = {};\nfunction firstIsString(x) {\n    if (Array.isArray(x)) return firstIsString(x[0]);\n    return typeof x === \"string\" ? 1009 : 0;\n}\nconst mergeUserTypes = function(types) {\n    const user = typeHandlers(types || {});\n    return {\n        serializers: Object.assign({}, serializers, user.serializers),\n        parsers: Object.assign({}, parsers, user.parsers)\n    };\n};\nfunction typeHandlers(types) {\n    return Object.keys(types).reduce((acc, k)=>{\n        types[k].from && [].concat(types[k].from).forEach((x)=>acc.parsers[x] = types[k].parse);\n        if (types[k].serialize) {\n            acc.serializers[types[k].to] = types[k].serialize;\n            types[k].from && [].concat(types[k].from).forEach((x)=>acc.serializers[x] = types[k].serialize);\n        }\n        return acc;\n    }, {\n        parsers: {},\n        serializers: {}\n    });\n}\nfunction escapeIdentifiers(xs, { transform: { column } }) {\n    return xs.map((x)=>escapeIdentifier(column.to ? column.to(x) : x)).join(\",\");\n}\nconst escapeIdentifier = function escape(str) {\n    return '\"' + str.replace(/\"/g, '\"\"').replace(/\\./g, '\".\"') + '\"';\n};\nconst inferType = function inferType(x) {\n    return x instanceof Parameter ? x.type : x instanceof Date ? 1184 : x instanceof Uint8Array ? 17 : x === true || x === false ? 16 : typeof x === \"bigint\" ? 20 : Array.isArray(x) ? inferType(x[0]) : 0;\n};\nconst escapeBackslash = /\\\\/g;\nconst escapeQuote = /\"/g;\nfunction arrayEscape(x) {\n    return x.replace(escapeBackslash, \"\\\\\\\\\").replace(escapeQuote, '\\\\\"');\n}\nconst arraySerializer = function arraySerializer(xs, serializer, options, typarray) {\n    if (Array.isArray(xs) === false) return xs;\n    if (!xs.length) return \"{}\";\n    const first = xs[0];\n    // Only _box (1020) has the ';' delimiter for arrays, all other types use the ',' delimiter\n    const delimiter = typarray === 1020 ? \";\" : \",\";\n    if (Array.isArray(first) && !first.type) return \"{\" + xs.map((x)=>arraySerializer(x, serializer, options, typarray)).join(delimiter) + \"}\";\n    return \"{\" + xs.map((x)=>{\n        if (x === undefined) {\n            x = options.transform.undefined;\n            if (x === undefined) throw _errors_js__WEBPACK_IMPORTED_MODULE_1__.Errors.generic(\"UNDEFINED_VALUE\", \"Undefined values are not allowed\");\n        }\n        return x === null ? \"null\" : '\"' + arrayEscape(serializer ? serializer(x.type ? x.value : x) : \"\" + x) + '\"';\n    }).join(delimiter) + \"}\";\n};\nconst arrayParserState = {\n    i: 0,\n    char: null,\n    str: \"\",\n    quoted: false,\n    last: 0\n};\nconst arrayParser = function arrayParser(x, parser, typarray) {\n    arrayParserState.i = arrayParserState.last = 0;\n    return arrayParserLoop(arrayParserState, x, parser, typarray);\n};\nfunction arrayParserLoop(s, x, parser, typarray) {\n    const xs = [];\n    // Only _box (1020) has the ';' delimiter for arrays, all other types use the ',' delimiter\n    const delimiter = typarray === 1020 ? \";\" : \",\";\n    for(; s.i < x.length; s.i++){\n        s.char = x[s.i];\n        if (s.quoted) {\n            if (s.char === \"\\\\\") {\n                s.str += x[++s.i];\n            } else if (s.char === '\"') {\n                xs.push(parser ? parser(s.str) : s.str);\n                s.str = \"\";\n                s.quoted = x[s.i + 1] === '\"';\n                s.last = s.i + 2;\n            } else {\n                s.str += s.char;\n            }\n        } else if (s.char === '\"') {\n            s.quoted = true;\n        } else if (s.char === \"{\") {\n            s.last = ++s.i;\n            xs.push(arrayParserLoop(s, x, parser, typarray));\n        } else if (s.char === \"}\") {\n            s.quoted = false;\n            s.last < s.i && xs.push(parser ? parser(x.slice(s.last, s.i)) : x.slice(s.last, s.i));\n            s.last = s.i + 1;\n            break;\n        } else if (s.char === delimiter && s.p !== \"}\" && s.p !== '\"') {\n            xs.push(parser ? parser(x.slice(s.last, s.i)) : x.slice(s.last, s.i));\n            s.last = s.i + 1;\n        }\n        s.p = s.char;\n    }\n    s.last < s.i && xs.push(parser ? parser(x.slice(s.last, s.i + 1)) : x.slice(s.last, s.i + 1));\n    return xs;\n}\nconst toCamel = (x)=>{\n    let str = x[0];\n    for(let i = 1; i < x.length; i++)str += x[i] === \"_\" ? x[++i].toUpperCase() : x[i];\n    return str;\n};\nconst toPascal = (x)=>{\n    let str = x[0].toUpperCase();\n    for(let i = 1; i < x.length; i++)str += x[i] === \"_\" ? x[++i].toUpperCase() : x[i];\n    return str;\n};\nconst toKebab = (x)=>x.replace(/_/g, \"-\");\nconst fromCamel = (x)=>x.replace(/([A-Z])/g, \"_$1\").toLowerCase();\nconst fromPascal = (x)=>(x.slice(0, 1) + x.slice(1).replace(/([A-Z])/g, \"_$1\")).toLowerCase();\nconst fromKebab = (x)=>x.replace(/-/g, \"_\");\nfunction createJsonTransform(fn) {\n    return function jsonTransform(x, column) {\n        return typeof x === \"object\" && x !== null && (column.type === 114 || column.type === 3802) ? Array.isArray(x) ? x.map((x)=>jsonTransform(x, column)) : Object.entries(x).reduce((acc, [k, v])=>Object.assign(acc, {\n                [fn(k)]: jsonTransform(v, column)\n            }), {}) : x;\n    };\n}\ntoCamel.column = {\n    from: toCamel\n};\ntoCamel.value = {\n    from: createJsonTransform(toCamel)\n};\nfromCamel.column = {\n    to: fromCamel\n};\nconst camel = {\n    ...toCamel\n};\ncamel.column.to = fromCamel;\ntoPascal.column = {\n    from: toPascal\n};\ntoPascal.value = {\n    from: createJsonTransform(toPascal)\n};\nfromPascal.column = {\n    to: fromPascal\n};\nconst pascal = {\n    ...toPascal\n};\npascal.column.to = fromPascal;\ntoKebab.column = {\n    from: toKebab\n};\ntoKebab.value = {\n    from: createJsonTransform(toKebab)\n};\nfromKebab.column = {\n    to: fromKebab\n};\nconst kebab = {\n    ...toKebab\n};\nkebab.column.to = fromKebab;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/postgres/src/types.js\n");

/***/ })

};
;